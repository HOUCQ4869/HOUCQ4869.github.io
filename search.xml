<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>OSLab1</title>
      <link href="/2023/04/06/oslab1/"/>
      <url>/2023/04/06/oslab1/</url>
      
        <content type="html"><![CDATA[<h1 id="Lab1-实验报告"><a href="#Lab1-实验报告" class="headerlink" title="Lab1 实验报告"></a>Lab1 实验报告</h1><p><strong>PB21111618 侯超群</strong></p><h2 id="实验目标"><a href="#实验目标" class="headerlink" title="实验目标"></a>实验目标</h2><p>本次实验用于实现multiboot header部分,并在屏幕以及串口上输出特定内容；</p><h2 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h2><h3 id="multiboot启动协议介绍"><a href="#multiboot启动协议介绍" class="headerlink" title="multiboot启动协议介绍"></a>multiboot启动协议介绍</h3><p>multiboot作为一种启动引导协议，能够制定bootloader和操作系统之间的接口，解决多系统与不同bootloader可能的矛盾；</p><h3 id="qemu介绍"><a href="#qemu介绍" class="headerlink" title="qemu介绍"></a>qemu介绍</h3><p>qemu作为模拟器，用于模拟硬件设备，其支持multiboot协议，在该实验中，用于提供裸机环境，使用qemu启动所编写的内核；</p><h3 id="VGA介绍"><a href="#VGA介绍" class="headerlink" title="VGA介绍"></a>VGA介绍</h3><p>VGA作为一种显示方式，可以通过向VGA显存中写入内容来实现字符的显示；<br>VGA显存起始地址0xB8000,由存放字符的ASCLl码以及该字符的显示属性构成两个字节；<br><a href="https://imgse.com/i/ppI6xiR"><img src="https://s1.ax1x.com/2023/04/06/ppI6xiR.png" alt="VGA"></a></p><h3 id="串口介绍"><a href="#串口介绍" class="headerlink" title="串口介绍"></a>串口介绍</h3><p>UART，全称通用异步收发传输器，是一种串行异步收发协议，原理是将传输数据的每个二进制位一位一位地传输；<br>在qemu中，在没有初始化波特率的情况下，也可以直接写UART，正确输出；<br>串口端口地址为0x3F8，可依次调用，实现各个字符输出；</p><h2 id="源代码说明"><a href="#源代码说明" class="headerlink" title="源代码说明"></a>源代码说明</h2><pre class="line-numbers language-none"><code class="language-none">movl $0x2f652f48, 0xB8000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该段代码中，将字符以及显示属性，写入VGA显存中，其中0x2f652f48中,65,48分别对应ASCLL码中的e,H；前面的2f为其显示属性，写入到起始地址0x8000；</p><pre class="line-numbers language-none"><code class="language-none">movw $0x3F8, %dx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该段代码中，初始化串口，将串口端口地址存入dx寄存器，便于之后输出显示；</p><pre class="line-numbers language-none"><code class="language-none">movb $0x68, %al<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该段代码中，将待显示的字符h写入寄存器al中，再通过outb实现输出；</p><h2 id="代码布局说明"><a href="#代码布局说明" class="headerlink" title="代码布局说明"></a>代码布局说明</h2><pre class="line-numbers language-none"><code class="language-none">OUTPUT_FORMAT(&quot;elf32-i386&quot;, &quot;elf32-i386&quot;, &quot;elf32-i386&quot;)OUTPUT_ARCH(i386)ENTRY(start)SECTIONS &#123;        . &#x3D; 1M;        .text : &#123;                *(.multiboot_header)                . &#x3D; ALIGN(8);                *(.text)        &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>.表示当前位置，则.&#x3D;1M使用物理内存的1M开始放置数据和代码；</li><li>内容以multiboot_header开始，12个字节；</li><li>.&#x3D;ALIGN(8)，8字节对齐后放置写入VGA的代码；</li></ul><h2 id="编译过程说明"><a href="#编译过程说明" class="headerlink" title="编译过程说明"></a>编译过程说明</h2><pre class="line-numbers language-none"><code class="language-none">ASM_FLAGS&#x3D; -m32 --pipe -Wall -fasm -g -O1 -fno-stack-protectormultibootHeader.bin: multibootHeader.Sgcc -c $&#123;ASM_FLAGS&#125; multibootHeader.S -o multibootHeader.old -n -T multibootHeader.ld multibootHeader.o -o multibootHeader.binclean:rm -rf .&#x2F;multibootHeader.bin .&#x2F;multibootHeader.o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>以上为Makefile文件，ASM_FLAGS先定义汇编标记，表示编译中gcc指令的参数；</li><li>使用gcc生成目标文件.o文件；</li><li>根据链接器.ld文件，根据部署要求从.o文件得到.bin文件；</li><li>clean指令用于删除生成的.o文件和.bin文件；</li></ul><p>在使用make指令生成.bin文件后，输入如下指令来运行qemu</p><pre class="line-numbers language-none"><code class="language-none">qemu-system-i386 -kernel multibootHeader.bin -serial stdio<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中qemu-system-i386指定平台i386，-kernel指定内核文件，-serial stdio指定串行终端为标准输入输出</p><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><ul><li>串口输出如下：<strong>显示hcq</strong><br><img src="https://s1.ax1x.com/2023/04/06/ppI6jo9.png" alt="串口显示"></li><li>VGA输出如下：<strong>显示Hello,PB21111618-houchaoqun!</strong><br><img src="https://s1.ax1x.com/2023/04/06/ppI6XdJ.png" alt="VGA显示"></li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>开始时使用vmware虚拟机时在Vmaretools设置共享文件夹，但无法找到&#x2F;mnt&#x2F;c&#x2F;下的共享文件夹，经搜索无果，因此又采用了第一种方法配置wsl2，通过建立符号链接实现配置；</p>]]></content>
      
      
      <categories>
          
          <category> OSLab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Graph</title>
      <link href="/2023/02/22/graph/"/>
      <url>/2023/02/22/graph/</url>
      
        <content type="html"><![CDATA[<h1 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h1><h2 id="定义-amp-概念"><a href="#定义-amp-概念" class="headerlink" title="定义&amp;概念"></a>定义&amp;概念</h2><p>相关概念：</p><ul><li><strong>有向图</strong>， <strong>无向图</strong>，<strong>简单图</strong>， <strong>完全图</strong>，<strong>有向完全图</strong>（弧数为前者两倍），稀疏图、稠密图；  </li><li>顶点不重复-&gt;<strong>简单</strong>路径&#x2F;回路&#x2F;环；  </li><li>（无向图中）<strong>连通图</strong>：任意两个顶点都是连通的；<strong>连通分量</strong>：无向图中的极大连通子图；</li><li>（有向图中）<strong>强连通图</strong>：a-&gt;b,b-&gt;a均存在路径；<strong>强连通分量</strong>：有向图中的极大连通子图；</li><li><strong>生成树</strong>：一个极小连通子图；在非连通图中，连通分量的生成树构成了非连通图的<strong>生成森林</strong>；</li></ul><h2 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h2><h3 id="数组表示法（邻接矩阵）"><a href="#数组表示法（邻接矩阵）" class="headerlink" title="数组表示法（邻接矩阵）"></a>数组表示法（邻接矩阵）</h3><p>对于无向图的邻接矩阵，其一定是一个对称矩阵，而对于有向图而言并不对称；</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define INFINITY INT_MAX  &#x2F;&#x2F; 最大值#define MAX_VERTEX_NUM 20 &#x2F;&#x2F; 最大顶点个数typedef int VRType;     &#x2F;&#x2F; 顶点关系类型，无权图1,0表相邻，带权图表权值typedef int *InfoType;  &#x2F;&#x2F; 弧相关信息指针typedef int VertexType; &#x2F;&#x2F; 顶点向量typedef enum&#123;  DG,  DN,  UDG,  UDN&#125; GraphKind; &#x2F;&#x2F;&#123;有向图，有向网，无向图，无向网&#125;typedef struct ArcCell&#123;  VRType adj;  InfoType *info;&#125; ArcCell, AdjMatrix[MAX_VERTEX_NUM][MAX_VERTEX_NUM];typedef struct&#123;  VertexType vexs[MAX_VERTEX_NUM];  AdjMatrix arcs;     &#x2F;&#x2F; 邻接矩阵  int vexnum, arcnum; &#x2F;&#x2F; 顶点数及弧数  GraphKind kind;     &#x2F;&#x2F; 图的种类标志&#125; MGraph;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>邻接矩阵表示法的空间复杂度为O(n^2)，适合稠密图进行存储表示；</p><h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><p>链式存储结构，在邻接表中，对图中每个顶点建立一个单链表，单链表中每个节点表示依附于该顶点的各边。<br>每个节点由三个域组成，邻接点域指示与该弧指向的顶点位置；链域指示下一条边或弧的节点；数据域存储边或弧的相关信息，如权值等；在每个链表上附设一个表头节点，包含指向第一条弧的链域以及顶点信息；</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F; 邻接表#define MAX_VERTEX_NUM 20typedef struct ArcNode&#123; &#x2F;&#x2F; 弧节点  int adjvex;              &#x2F;&#x2F; 该弧指向的顶点位置  struct ArcNode *nextarc; &#x2F;&#x2F; 指向下一条弧的指针  InfoType *info;          &#x2F;&#x2F; 该弧相关信息的指针&#125; ArcNode;typedef struct VNode&#123;   VertexType data;   &#x2F;&#x2F; 顶点信息  ArcNode *firstarc; &#x2F;&#x2F; 指向第一条依附于该顶点的弧的指针&#125; VNode, AdjList[MAX_VERTEX_NUM];typedef struct&#123;  AdjList vertices;  int vexnum, arcnum; &#x2F;&#x2F; 图的当前顶点数和弧数  int kind;           &#x2F;&#x2F; 图的种类标志&#125; ALGraph;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>邻接表的表示方式便于实现对于出度的求解，然而对于入度，则必须遍历整个邻接表。为此可以建立一个有向图的逆邻接表，加速求解给定顶点的入度；</p><h3 id="十字链表"><a href="#十字链表" class="headerlink" title="十字链表"></a>十字链表</h3><p>十字链表可视作将有向图的邻接表与逆邻接表结合起来，<br>弧节点中有五个域，尾域tailvex和头域headvex分别指示弧尾和弧头这两个顶点在图中的位置；链域hlink指向弧头相同的下一条弧；链域tlink指向弧尾相同的下一条弧；info域指示相关信息；<br>顶点节点有三个域，data域存储节点相关信息；firstin及firstout两个链域分别指向以该顶点为弧头或弧尾的第一个弧节点；</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F; 十字链表#define MAX_VERTEX_NUM 20typedef struct ArcBox&#123;  int tailvex, headvex;         &#x2F;&#x2F; 该弧的尾和头顶点的位置  struct ArcBox *hlink, *tlink; &#x2F;&#x2F; 分别为弧头相同和弧尾相同的弧的链域  InfoType *info;               &#x2F;&#x2F; 该弧相关信息&#125; ArcBox;typedef struct VexNode&#123;  VertexType data;  ArcBox *firstin, *firstout; &#x2F;&#x2F; 分别指向该顶点的第一条入弧和出弧&#125; VexNode;typedef struct&#123;  VexNode xlist[MAX_VERTEX_NUM]; &#x2F;&#x2F; 表头向量  int vexnum, arcnum;            &#x2F;&#x2F; 有向图的当前顶点数和弧数&#125; OLGraph;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="邻接多重表"><a href="#邻接多重表" class="headerlink" title="邻接多重表"></a>邻接多重表</h3><p>未完待续……</p><h2 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h2><h3 id="深度优先搜索-DFS"><a href="#深度优先搜索-DFS" class="headerlink" title="深度优先搜索(DFS)"></a>深度优先搜索(DFS)</h3><p>类似于树的先根遍历，假设初始状态是图中所有顶点未曾被访问，DFS从某一顶点v出发，访问该节点，依次从v的未被访问的邻接点出发深度优先遍历图，指示图中所有和v有路径相通的顶点都被访问到；若此时还有顶点未被访问，则另选一个未被访问的顶点做起点，继续DFS;</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef int Status;int visited[MAX_VERTEX_NUM]; &#x2F;&#x2F; 访问标记数组Status (*VisitFunc)(int v);  &#x2F;&#x2F; 函数变量&#x2F;&#x2F;该处不一定是MGraphvoid DFSTraverse(MGraph G, Status (*Visit)(int v))&#123;                    &#x2F;&#x2F; 对图G作深度优先遍历  VisitFunc &#x3D; Visit; &#x2F;&#x2F; 使用全局变量VisitFunc, 使DFS不必设函数指针参数  for (int v &#x3D; 0; v &lt; G.vexnum; v++)    visited[v] &#x3D; 0; &#x2F;&#x2F; 初始化  for (int v &#x3D; 0; v &lt; G.vexnum; v++)    if (!visited[v]) &#x2F;&#x2F; 对未访问节点调用DFS      DFS(G, v);&#125;void DFS(MGraph G, int v)&#123; &#x2F;&#x2F; 从第v个顶点出发递归地深度优先遍历图G  visited[v] &#x3D; 1;  VisitFunc(v);  for (int w &#x3D; FirstAdjVex(G, v); w &gt;&#x3D; 0; w &#x3D; NextAdjVex(G, v, w))    if (!visited[w])      DFS(G, w); &#x2F;&#x2F; 对尚未访问的邻接顶点w递归调用DFS&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h3><p>类似于树的按层次遍历，假设从图中某顶点v出发，访问v后依次访问v的各个未曾访问的邻接点，然后从这些邻接点出发依次访问他们的邻接点，而且要求“先被访问的顶点的邻接点”先于“后被访问的顶点的邻接点”被访问，直至所有已访问顶点的邻接点均被访问。同样，若存在未被访问的节点，选取并重复上述过程；</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void BFSTraverse(MGraph G, Status (*Visit)(int v))&#123; &#x2F;&#x2F; 按广度优先非递归遍历图G，使用辅助队列Q和访问标志数组visited  for (int v &#x3D; 0; v &lt; G.vexnum; v++)    visited[v] &#x3D; 0; &#x2F;&#x2F; 初始化  SqQueue *Q &#x3D; (SqQueue *)malloc(sizeof(SqQueue));  InitQueue(Q); &#x2F;&#x2F;  for (int v &#x3D; 0; v &lt; G.vexnum; v++)  &#123;    if (!visited[v])    &#123;      visited[v] &#x3D; 1;      Visit(v);      EnQueue(Q, v); &#x2F;&#x2F; 入队，便于之后先层次遍历      while (!QueueEmpty(Q))      &#123; &#x2F;&#x2F; 若队列不空        int *u &#x3D; (int *)malloc(sizeof(int));        DeQueue(Q, u); &#x2F;&#x2F; 出队，进行层次遍历        for (int w &#x3D; FirstAdjVex(G, u); w &gt;&#x3D; 0; w &#x3D; NextAdjVex(G, u, w))          if (!visited[w])          &#123;            visited[w] &#x3D; 1;            Visit(w);            EnQueue(Q, w); &#x2F;&#x2F; 将初次访问节点再次入队          &#125;      &#125;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="图的连通性问题"><a href="#图的连通性问题" class="headerlink" title="图的连通性问题"></a>图的连通性问题</h2><h3 id="无向图的连通分量和生成树"><a href="#无向图的连通分量和生成树" class="headerlink" title="无向图的连通分量和生成树"></a>无向图的连通分量和生成树</h3><p>由DFS搜索得到的为<strong>深度优先生成树（森林）</strong>，由BFS搜索得到的为<strong>广度优先生成树（森林）</strong><br>假设以孩子兄弟链表作为生成森林的存储结构，如下算法生成非连通图的深度优先生成森林：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">……<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="有向图的强连通分量"><a href="#有向图的强连通分量" class="headerlink" title="有向图的强连通分量"></a>有向图的强连通分量</h3><p>未完待续……</p><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><p>构造连通网的最小代价生成树（简称为最小生成树）问题；<br>多数算法借助最小生成树的一种简称为MST的性质：假设连通网N&#x3D;(V,{E})，U是顶点集V的一个非空子集，若(u,v)是一条具有最小权值的边，其中顶点u属于U，顶点v属于V-U，则必存在一颗包含边(u,v)的最小生成树；<br>如下介绍普里姆算法(Prim)和克鲁斯卡尔算法(Kruskal):</p><ul><li><strong>Prim</strong></li></ul><p>从一个顶点出发，在保证不形成回路的前提下，每找到并添加一条最短的边，就把当前形成的连通分量当做一个整体或者一个点看待，然后重复找最短的边并添加；</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F; 记录从顶点集U-&gt;U-V的代价最小的边的辅助数组定义:struct&#123;  VertexType adjvex;  VRType lowcost;&#125; closedge[MAX_VERTEX_NUM];void MiniSpanTree_PRIM(MGraph G, VertexType u)&#123; &#x2F;&#x2F; 用普里姆算法从第u个顶点出发构造网G的最小生成树T，输出T的各条边  int k &#x3D; LocateVex(G, u);  for (int j &#x3D; 0; j &lt; G.vexnum; j++)  &#123; &#x2F;&#x2F; 辅助数组初始化，此时顶点集中元素只有u    if (j !&#x3D; k)    &#123;      closedge[j].adjvex &#x3D; u;      closedge[j].lowcost &#x3D; G.arcs[k][j].adj;    &#125;  &#125;  closedge[k].lowcost &#x3D; 0; &#x2F;&#x2F; 初始顶点，U&#x3D;&#123;u&#125;  for (int i &#x3D; 1; i &lt; G.vexnum; i++)  &#123;    k &#x3D; minimum(closedge);    &#x2F;&#x2F;minimum函数实现在U-V顶点集中找到距U顶点集最近的顶点    &#x2F;&#x2F;即closedge中在U-V顶点集中lowcost最小的顶点    printf(closedge[k].adjvex, G.vexs[k]);    &#x2F;&#x2F;输出生成树的边    closedge[k].lowcost &#x3D; 0;    &#x2F;&#x2F;将该点加入U顶点集中，即此时代价为0    for (int j &#x3D; 0; j &lt; G.vexnum; j++)    &#123; &#x2F;&#x2F;由于k并入U中，重新规划辅助数组，判断代价是否有更小的变化      if (G.arcs[k][j].adj &lt; closedge[j].lowcost)      &#123;        closedge[j].adjvex &#x3D; G.vexs[k];        closedge[j].lowcost &#x3D; G.arcs[k][j].adj;      &#125;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>Kruskal</strong></li></ul><p>假设初始状态为n个顶点而无边的存在，在该图中每个顶点自成一个连通分量；在E中选择代价最小的边，若该边依附的顶点在T的不同连通分量上，则可以将该边加入T中，否则另取下一条代价最小的边；</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">未完待续……<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="有向无环图及其应用"><a href="#有向无环图及其应用" class="headerlink" title="有向无环图及其应用"></a>有向无环图及其应用</h2><p>在一个表示工程的有向图中，用顶点表示活动，用弧表示活动之间的优先关系，这样的有向图为顶点表示活动的网，我们称为<strong>AOV网</strong>；一个无环的有向图称作**有向无环图(DAG)**；</p><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><p>由某个集合上的一个偏序得到该集合上的一个全序，这个操作称之为<strong>拓扑排序</strong>；</p><p>如何进行拓扑排序：</p><ul><li>从有向图中选一个没有前驱的顶点并输出；</li><li>从图中删除该顶点和所有以它为尾的弧；</li><li>重复以上过程，直至全部顶点均输出，或者当前图中不存在无前驱的顶点为止；</li></ul><p>采取邻接表作为有向图的存储结构，且在头结点中增加一个存放顶点入度的数组indegree;同时为避免重复检测入度为零的顶点，另设一栈暂存所有入度为零的顶点；</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status TopologicalSort(ALGraph G)&#123;  int indegree[MAX_VERTEX_NUM];  FindInDegree(G, indegree); &#x2F;&#x2F; 对各顶点求入度  SqStack *S &#x3D; (SqStack *)malloc(sizeof(SqStack));  InitStack(S); &#x2F;&#x2F; 建零入度顶点栈  for (int i &#x3D; 0; i &lt; G.vexnum; i++)  &#123; &#x2F;&#x2F; 入度为零者进栈    if (!indegree[i])      Push(S, i);  &#125;  int count &#x3D; 0;  while (!StackEmpty(S))  &#123;    int *i &#x3D; (int *)malloc(sizeof(int));    Pop(S, i);    printf(i, G.vertices[*i].data);    count++; &#x2F;&#x2F; 输出i号顶点并计数    for (ArcNode *p &#x3D; G.vertices[*i].firstarc; p; p &#x3D; p-&gt;nextarc)    &#123;      int k &#x3D; p-&gt;adjvex;      if (!(--indegree[k]))        Push(S, k); &#x2F;&#x2F; 对于删除节点后入度减为零的节点进行入栈操作    &#125;  &#125;  if (count &lt; G.vexnum)    return ERROR; &#x2F;&#x2F; 此时有向图有回路  else    return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于输出每个顶点的同时还要删除以它为起点的边，因此拓扑排序的时间复杂度为O(n+e);<br>考虑有向图中无环时，也可以利用深度优先遍历实现拓扑排序，由于从某点出发进行深度优先搜索遍历时，最先退出DFS函数的顶点即出度为零的顶点，也即是拓扑有序序列中最后一个顶点，因此按照退出DFS函数的先后记录下来的顶点序列即为逆向的拓扑有序序列；</p><h3 id="关键路径"><a href="#关键路径" class="headerlink" title="关键路径"></a>关键路径</h3><p>在带权有向图中，以顶点表示事件，以有向边表示活动，以边上的权值表示完成该活动的开销，称之用边表示活动的网络，简称<strong>AOE网</strong>；</p><p>再次表明AOE网与AOV网的异同，两者都是有向无环图，不同之处在于边和顶点表示的含义是不同的，AOE网中的边有权值，而AOV网中的边无权值，仅表示顶点之间的前后关系；</p><p>AOE网有如下性质：</p><ul><li>在某顶点代表事件发生后，从该顶点出发的各有向边所代表的活动才能开始；</li><li>在进入某顶点的各有向边所代表的的活动都已结束后，该顶点所代表的的事件才能发生；</li></ul><p>相关概念：顶点（源点），结束顶点（汇点）；<strong>路径长度</strong>指各个活动所持续的时间之和；<strong>关键路径</strong>指从源点到汇点具有最大长度的路径，同时在关键路径上的活动称之为<strong>关键活动</strong>；<br>未完待续……</p><h2 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h2><p>两顶点之间经过的边上权值之和最小的路径，且称路径上的第一个顶点为源点，最后一个顶点为终点；</p><h3 id="迪杰斯特拉算法-Dijkstra"><a href="#迪杰斯特拉算法-Dijkstra" class="headerlink" title="迪杰斯特拉算法(Dijkstra)"></a>迪杰斯特拉算法(Dijkstra)</h3><h3 id="弗洛伊德算法-Floyd"><a href="#弗洛伊德算法-Floyd" class="headerlink" title="弗洛伊德算法(Floyd)"></a>弗洛伊德算法(Floyd)</h3><p>未完待续……</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tree</title>
      <link href="/2023/02/13/tree/"/>
      <url>/2023/02/13/tree/</url>
      
        <content type="html"><![CDATA[<h1 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h1><p>基本概念：子树，度，叶子（终端节点），分支节点（非终端节点），孩子，双亲，兄弟，子孙……<br>节点<strong>层次</strong>：注意从根开始定义，根为第一层;<br>树的<strong>深度（高度）</strong>：树中节点的最大层次；<br>以及如节点各子树有次序，称其为<strong>有序树</strong>，否则为<strong>无序树</strong>；<br><strong>森林</strong>为n棵互不相交的树的集合；  </p><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p><strong>二叉树</strong>是一种树形结构，各个节点至多只有两棵子树，且各子树有次序，为有序树；  </p><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><ul><li>顺序存储结构<pre class="line-numbers language-C" data-language="C"><code class="language-C">#define MAX_TREE_SIZE 100                   &#x2F;&#x2F;二叉树最大节点数typedef TElemType SqBiTree[MAX_TREE_SIZE];  &#x2F;&#x2F;0号存储根节点SqBiTree bt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>链式存储结构<pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef struct BiTNode&#123;  TElemType data;  struct BiTNode *lchild, *rchild;&#125;BiTNode, *BiTree;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="遍历二叉树及线索二叉树"><a href="#遍历二叉树及线索二叉树" class="headerlink" title="遍历二叉树及线索二叉树"></a>遍历二叉树及线索二叉树</h2><h3 id="遍历二叉树"><a href="#遍历二叉树" class="headerlink" title="遍历二叉树"></a>遍历二叉树</h3><p>首先标明三种概念，<strong>先序遍历</strong>，<strong>中序遍历</strong>，以及<strong>后序遍历</strong>。实际上，其分别对应于波兰式，中缀表达式，逆波兰式；  </p><ul><li>先序：根-&gt;左-&gt;右</li><li>中序：左-&gt;根-&gt;右</li><li>后序：左-&gt;右-&gt;根</li></ul><p>可以均从左向右历遍，根据经过该节点的次数判断是否遍历，首先经过，即先序，历遍该节点的左子树后，再次经过该节点，即中序，再历遍右子树后返回该节点，即后序；</p><h4 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h4><p>以先序遍历为例，如下：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status PreOrderTraverse(BiTree T, Status (*Visit)(TElemType e))&#123;  if (T)  &#123;    if (T-&gt;data)    &#123;      if (PreOrderTraverse(T-&gt;lchild, Visit))      &#123;        if (PreOrderTraverse(T-&gt;rchild, Visit))          return OK;      &#125;    &#125;    return ERROR;  &#125;  else    return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>中序遍历以及后序遍历即将根节点的访问置于中间或最后，在此不做赘述；  </p><h4 id="非递归算法"><a href="#非递归算法" class="headerlink" title="非递归算法"></a>非递归算法</h4><ul><li>中序遍历的非递归算法<pre class="line-numbers language-C" data-language="C"><code class="language-C">Status InOrderTraverse(BiTree T, Status (*Visit)(TElemType e))&#123;  SqStack *S &#x3D; (SqStack *)malloc(sizeof(SqStack));  InitStack(S);  Push(S, T);  while (!StackEmpty(*S))  &#123;    BiTNode *p &#x3D; (BiTNode *)malloc(sizeof(BiTNode));    while (GetTop(*S, p) &amp;&amp; p)      Push(S, p-&gt;lchild);    Pop(S, p);    if (!StackEmpty(*S))    &#123;      Pop(S, p);      if (!Visit(p-&gt;data))        return ERROR;      Push(S, p-&gt;rchild);    &#125;  &#125;  return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>另一种形式如下：  <pre class="line-numbers language-C" data-language="C"><code class="language-C">Status InOrder_Traverse(BiTree T, Status (*Visit)(TElemType e))&#123;  SqStack *S &#x3D; (SqStack *)malloc(sizeof(SqStack));  InitStack(S);  BiTNode *p &#x3D; T;  while (p || !StackEmpty(*S))  &#123;    if (p)    &#123; &#x2F;&#x2F; 根指针进栈，遍历左子树      Push(S, p);      p &#x3D; p-&gt;lchild;    &#125;    else    &#123; &#x2F;&#x2F; 根指针退栈，遍历右子树      Pop(S, p);      if (!Visit(p-&gt;data))        return ERROR;      p &#x3D; p-&gt;rchild;    &#125;  &#125;  return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>两种方法均在于在于每次向左历遍后退栈空指针，进行中序遍历访问，再向右一步进行继续历遍；</li><li>先序遍历的非递归算法</li></ul><p>相较于中序遍历，先序遍历的非递归算法仅仅改变了访问节点的时刻；</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status PreOrder_Traverse(BiTree T, Status (*Visit)(TElemType e))&#123;  SqStack *S &#x3D; (SqStack *)malloc(sizeof(SqStack));  InitStack(S);  BiTNode *p &#x3D; T;  while (p || !StackEmpty(*S))  &#123;    if (p)    &#123;      if (!Visit(p-&gt;data))        return ERROR;      Push(S, p);      p &#x3D; p-&gt;lchild;    &#125;    else    &#123;      Pop(S, p);      p &#x3D; p-&gt;rchild;    &#125;  &#125;  return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>后序遍历的非递归算法</li></ul><p>其中主要是根据右子树以及是否访问过进行出栈访问的判断，要注意存在一个r标志，表示该节点已被访问过，相当于该节点的父节点的右子树为空；</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status PostOrder_Traverse(BiTree T, Status (*Visit)(TElemType e))&#123;  SqStack *S &#x3D; (SqStack *)malloc(sizeof(SqStack));  InitStack(S);  BiTNode *p &#x3D; T, *r &#x3D; NULL;  while (p || !StackEmpty(*S))  &#123;    if (p)    &#123; &#x2F;&#x2F; 同样先遍历左子树      Push(S, p);      p &#x3D; p-&gt;lchild;    &#125;    else    &#123; &#x2F;&#x2F; 先不出栈，根据栈顶元素的右子树情况进行判断      GetTop(*S, p);      if (p-&gt;rchild &amp;&amp; p-&gt;rchild !&#x3D; r)      &#123; &#x2F;&#x2F; 如果右子树存在，并且未被访问过        p &#x3D; p-&gt;rchild;        Push(S, p);        p &#x3D; p-&gt;lchild;      &#125;      else      &#123; &#x2F;&#x2F; 否则便可以直接出栈并访问        Pop(S, p);        if (!Visit(p-&gt;data))          return ERROR;        r &#x3D; p;    &#x2F;&#x2F; 标记该节点已被访问，便于其父节点判断        p &#x3D; NULL; &#x2F;&#x2F; 修改p,直接跳入对其父节点判断      &#125;    &#125;  &#125;  return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h4><p>对于层次遍历，需要借助一个队列，先将二叉树根节点入队，然后出队访问，将其左右子树根节点入队，循环以上过程，直至队列为空……</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status LevelOrder(BiTree T)&#123;  SqQueue *Q &#x3D; (SqQueue *)malloc(sizeof(SqQueue));  InitQueue(Q);  BiTree p;  EnQueue(Q, T);  while (!(Q-&gt;front &#x3D;&#x3D; Q-&gt;rear))  &#123; &#x2F;&#x2F;若队列不空    DeQueue(Q, p);    Visit(p);    if (p-&gt;lchild !&#x3D; NULL)      EnQueue(Q, p-&gt;lchild);  &#x2F;&#x2F;左子树    if (p-&gt;rchild !&#x3D; NULL)      EnQueue(Q, p-&gt;rchild);  &#x2F;&#x2F;右子树  &#125;  return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="构造二叉树"><a href="#构造二叉树" class="headerlink" title="构造二叉树"></a>构造二叉树</h4><ul><li><p>先序序列和中序序列确定二叉树</p><p>在中序序列中找到依次找到先序序列中元素作为根节点，则该节点左侧所有元素即属于左子树，同理，右侧均属于右子树；</p></li><li><p>后序序列和中序序列确定二叉树  </p><p>同样是分割中序序列，由后序序列的最后一个节点如同先序序列的第一个节点，构造二叉树；</p></li><li><p>层序序列和中序序列确定二叉树</p><p>由层序序列同样可以得到各子树根节点，由此分割中序序列得到二叉树；</p></li></ul><h3 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h3><p>试作如下规定：若节点有左子树，则其lchild域指示其左孩子，否则令lchild域指示其前驱；若节点有右子树，则其rchild域指示其右孩子，否则令rchild域指示其后继。<br>根据此改变节点结构，增加两个标志域如下：</p><p>$$LTag &#x3D; \begin{cases}<br>0,lchild域指示节点的左孩子<br>\1,lchild域指示节点的前驱<br>\end{cases}$$<br>$$LTag &#x3D; \begin{cases}<br>0,rchild域指示节点的右孩子<br>\1,lrchild域指示节点的后继<br>\end{cases}$$</p><p>以此节点结构构成的二叉链表作为二叉树的存储结构，称其为<strong>线索链表</strong>，指向节点前驱和后级的指针称为<strong>线索</strong>，加上线索的二叉树称之为<strong>线索二叉树</strong>，对二叉树以某种次序遍历使其变为线索二叉树的过程叫做<strong>线索化</strong>；</p><h4 id="存储表示"><a href="#存储表示" class="headerlink" title="存储表示"></a>存储表示</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef enum PointerTag&#123;  Link,  Thread&#125;;typedef struct BiThrNode&#123;  TElemType data;  struct BiThrNode *lchild, *rchild;  PointerTag LTag, RTag; &#x2F;&#x2F; 左右标志&#125; BiThrNode, *BiThrTree;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时仿照线性表的存储结构，在二叉树线索链表上添加一个头结点，其lchild域的指针指向二叉树的根节点，其rchild域的指针指向中序遍历时访问的最后一个节点；同时中序序列中的第一个节点的lchild域指针和最后一个节点的rchild域指针均指向头结点；</p><h4 id="线索二叉树的遍历"><a href="#线索二叉树的遍历" class="headerlink" title="线索二叉树的遍历"></a>线索二叉树的遍历</h4><ul><li>中序遍历二叉线索树</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status InOrderTraverse_Thr(BiThrTree T, Status (*Visit)(TElemType))&#123; &#x2F;&#x2F; 中序遍历二叉线索树T的非递归算法  BiThrNode *p &#x3D; T-&gt;lchild; &#x2F;&#x2F; T为头结点，p指向树的根节点  while (p !&#x3D; T)  &#123;    while (p-&gt;LTag &#x3D;&#x3D; Link)      p &#x3D; p-&gt;lchild;    if (!Visit(p-&gt;data))      return ERROR;    while (p-&gt;RTag &#x3D;&#x3D; Thread &amp;&amp; p-&gt;rchild !&#x3D; T)    &#123; &#x2F;&#x2F;访问后继节点，直到存在右子树的节点或指向头指针的节点      p &#x3D; p-&gt;rchild;      Visit(p-&gt;data);    &#125;    p &#x3D; p-&gt;rchild;    &#x2F;&#x2F;对其右子树再次中序遍历  &#125;  return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二叉树的线索化"><a href="#二叉树的线索化" class="headerlink" title="二叉树的线索化"></a>二叉树的线索化</h4><ul><li>中序遍历二叉树，并将其中序线索化</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status InOrderThreading(BiThrTree *Thrt, BiThrTree T)&#123;  if (!(Thrt &#x3D; (BiThrTree *)malloc(sizeof(BiThrTree))))    return ERROR;  (*Thrt)-&gt;LTag &#x3D; Link;  (*Thrt)-&gt;RTag &#x3D; Thread; &#x2F;&#x2F; 建立头结点  (*Thrt)-&gt;rchild &#x3D; Thrt; &#x2F;&#x2F; 右指针回指  if (!T)    (*Thrt)-&gt;lchild &#x3D; Thrt; &#x2F;&#x2F; 若二叉树空则左指针同样回指  else  &#123;    (*Thrt)-&gt;lchild &#x3D; T;    BiThrNode *pre &#x3D; Thrt;    InThreading(T, pre);    pre-&gt;rchild &#x3D; Thrt;    pre-&gt;RTag &#x3D; Thread;    (*Thrt)-&gt;rchild &#x3D; pre;  &#125;  return OK;&#125;void InThreading(BiThrTree p, BiThrNode *pre)&#123;  if (p)  &#123;    InThreading(p-&gt;lchild, pre); &#x2F;&#x2F; 左子树线索化    if (!p-&gt;lchild)    &#123; &#x2F;&#x2F; 前驱线索      p-&gt;LTag &#x3D; Thread;      p-&gt;lchild &#x3D; pre;    &#125;    if (!pre-&gt;rchild)    &#123; &#x2F;&#x2F; 后继线索      pre-&gt;RTag &#x3D; Thread;      pre-&gt;rchild &#x3D; p;    &#125;    pre &#x3D; p;     &#x2F;&#x2F;保持前驱更新    InThreading(p-&gt;rchild, pre); &#x2F;&#x2F; 右子树线索化  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中InThreading算法类似于中序遍历的递归算法，仅将访问节点改为了实现线索化；</p><ul><li>先序和后序线索化二叉树<br>类似于中序线索化二叉树，将递归算法中访问功能更改为线索化实现，即可得到相应的线索化算法；</li></ul><h2 id="树的存储结构"><a href="#树的存储结构" class="headerlink" title="树的存储结构"></a>树的存储结构</h2><p>如下有三种常用的链表结构：</p><h3 id="双亲表示法"><a href="#双亲表示法" class="headerlink" title="双亲表示法"></a>双亲表示法</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define MAX_TREE_SIZE 100typedef struct PTNode&#123; &#x2F;&#x2F; 节点结构  TElemType data;  int parent; &#x2F;&#x2F; 双亲位置域&#125; PTNode;typedef struct&#123;  PTNode nodes[MAX_TREE_SIZE];  int r, n; &#x2F;&#x2F; 根的位置和节点数&#125; PTree;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种结构利用了各节点（除根外）仅有一个双亲的性质；根据此性质便于实现对于父节点的查找，但是要求节点的孩子时则需要遍历整个结构；</p><h3 id="孩子表示法"><a href="#孩子表示法" class="headerlink" title="孩子表示法"></a>孩子表示法</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef struct CTNode&#123; &#x2F;&#x2F; 孩子节点  int child;  struct CTNode *next;&#125; *ChildPtr;typedef struct&#123;  TElemType data;  ChildPtr firstchild; &#x2F;&#x2F; 孩子链表头指针&#125; CTBox;typedef struct&#123;  CTBox nodes[MAX_TREE_SIZE];  int n, r; &#x2F;&#x2F; 节点数和根的位置&#125; CTree;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类似于双亲表示法，孩子表示法便于实现关于孩子的操作，考虑到两种方式的优劣性，故可拓展为带双亲的孩子链表；</p><h3 id="孩子兄弟表示法"><a href="#孩子兄弟表示法" class="headerlink" title="孩子兄弟表示法"></a>孩子兄弟表示法</h3><p>或称<strong>二叉树表示法，二叉链表表示法</strong></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef struct CSNode&#123;  TElemType data;  struct CSNode *firstchild, *nextsibling;&#125; CSNode, *CSTree;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="树-amp-森林-amp-二叉树"><a href="#树-amp-森林-amp-二叉树" class="headerlink" title="树&amp;森林&amp;二叉树"></a>树&amp;森林&amp;二叉树</h2><h3 id="森林与二叉树的转换"><a href="#森林与二叉树的转换" class="headerlink" title="森林与二叉树的转换"></a>森林与二叉树的转换</h3><p>由上述的二叉链表表示法可导出树与二叉树之间的一个对应关系，由此引出如下的转换方式：<br><strong>森林-&gt;二叉树</strong></p><ul><li>在兄弟节点之间加一条线（各树根可视作兄弟关系）；</li><li>对于每个节点，只保留其与第一个孩子的连线，其与抹除；</li><li>以树根为轴心，顺时针旋转45度；</li></ul><p><strong>二叉树-&gt;森林</strong></p><p>类似于如上的逆过程……</p><h3 id="树和森林的遍历"><a href="#树和森林的遍历" class="headerlink" title="树和森林的遍历"></a>树和森林的遍历</h3><p><strong>树的遍历</strong></p><ul><li>先根遍历：先访问树的根节点，然后一次先根遍历根的每棵子树；（类似先序）</li><li>后根遍历：先依次后根遍历每棵子树，然后访问根节点；（类似中序）</li></ul><p><strong>森林的遍历</strong></p><ul><li>先序遍历森林：第一棵树的根节点-&gt;先序遍历第一棵树中根节点的子树森林-&gt;先序遍历除第一棵树所构成的森林；</li><li>后序遍历森林：第一棵树的根节点的子树森林-&gt;访问第一棵树的根节点-&gt;后序遍历除第一棵树所构成的森林;</li></ul><h2 id="树与等价问题"><a href="#树与等价问题" class="headerlink" title="树与等价问题"></a>树与等价问题</h2><h2 id="Huffman树"><a href="#Huffman树" class="headerlink" title="Huffman树"></a>Huffman树</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>考虑到带权路径长度的概念，引出如下的<strong>huffman树</strong>或<strong>最优二叉树</strong>；  </p><ul><li>树的<strong>路径长度</strong>是从树根到每一节点的路径长度之和；  </li><li>树的<strong>带权路径长度</strong>为树中所有叶子节点的带权路径长度之和，记作<br>$$ WPL &#x3D; \sum_{k&#x3D;1}^{n}w_{k}l_{k}  $$</li></ul><h3 id="Huffman编码"><a href="#Huffman编码" class="headerlink" title="Huffman编码"></a>Huffman编码</h3><p>根据huffman树的原理使得二进制前缀编码的权重和最小，有如下实现：</p><h4 id="存储表示-1"><a href="#存储表示-1" class="headerlink" title="存储表示"></a>存储表示</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define OK 1#define ERROR -1#define MAX_FILENAME 100 &#x2F;&#x2F; 文件名最大长度#define MAX_NUM 9999999&#x2F;&#x2F; 统计字符频度的临时结点typedef struct&#123;  unsigned char str;   &#x2F;&#x2F; 存储该节点对应字符  unsigned int weight; &#x2F;&#x2F; 该字符频度&#125; StrNode;&#x2F;&#x2F; 哈夫曼树结点typedef struct&#123;  unsigned char str;          &#x2F;&#x2F; 以8bits为单元的无符号字符  unsigned int weight;        &#x2F;&#x2F; 每类（以二进制编码区分）字符出现频度  char *code;                 &#x2F;&#x2F; 字符对应的哈夫曼编码（动态分配存储空间）  int parent, lchild, rchild; &#x2F;&#x2F; 定义双亲和左右孩子&#125; HufNode, *HufTree;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F; 选择最小的两个结点void select(HufNode *huftree, unsigned int n, int *s1, int *s2)&#123;  unsigned int i;  unsigned int min &#x3D; MAX_NUM; &#x2F;&#x2F; 初始化最小值  for (i &#x3D; 0; i &lt; n; ++i)    if (huftree[i].parent &#x3D;&#x3D; 0 &amp;&amp; huftree[i].weight &lt; min)    &#123;      &#x2F;&#x2F; 选择父节点未被标记以及权重最小的节点      min &#x3D; huftree[i].weight;      *s1 &#x3D; i;    &#125;  huftree[*s1].parent &#x3D; 1; &#x2F;&#x2F; 标记该节点已有父节点  min &#x3D; MAX_NUM;           &#x2F;&#x2F; 重新初始化便于寻找  for (i &#x3D; 0; i &lt; n; ++i)    if (huftree[i].parent &#x3D;&#x3D; 0 &amp;&amp; huftree[i].weight &lt; min)    &#123;      &#x2F;&#x2F; 选择父节点未被标记以及权重第二小的节点      min &#x3D; huftree[i].weight;      *s2 &#x3D; i;    &#125;&#125;&#x2F;&#x2F; 建立赫夫曼树以及赫夫曼编码void HuffmanCoding(HufNode *huftree, unsigned int kinds)&#123;  unsigned int i;  int s1, s2;  for (i &#x3D; kinds; i &lt; 2 * kinds - 1; i++)  &#123; &#x2F;&#x2F; 建立Huffman树    select(huftree, i, &amp;s1, &amp;s2);    &#x2F;&#x2F; 找到最小的两个节点    huftree[s1].parent &#x3D; huftree[s2].parent &#x3D; i;    huftree[i].lchild &#x3D; s1;    huftree[i].rchild &#x3D; s2;    huftree[i].weight &#x3D; huftree[s1].weight + huftree[s2].weight;  &#125;  &#x2F;&#x2F; 构建Huffman编码  int c, f, start;  char *cd &#x3D; (char *)malloc(kinds * sizeof(char)); &#x2F;&#x2F; 存储编码kinds种  cd[kinds - 1] &#x3D; &#39;\0&#39;;                            &#x2F;&#x2F; 编码结束符  for (i &#x3D; 0; i &lt; kinds; ++i)  &#123; &#x2F;&#x2F; 逐个字符求其对应的Huffman编码    start &#x3D; kinds - 1;                                                       &#x2F;&#x2F; 编码结束符位置    for (c &#x3D; i, f &#x3D; huftree[i].parent; f !&#x3D; 0; c &#x3D; f, f &#x3D; huftree[f].parent) &#x2F;&#x2F; 从叶子到根逆向求编码      if (huftree[f].lchild &#x3D;&#x3D; c)        cd[--start] &#x3D; &#39;0&#39;; &#x2F;&#x2F; 左子树为0      else        cd[--start] &#x3D; &#39;1&#39;; &#x2F;&#x2F; 右子树为1    huftree[i].code &#x3D; (char *)malloc((kinds - start) * sizeof(char)); &#x2F;&#x2F; 为第i个字符编码分配存储空间    strcpy(huftree[i].code, &amp;cd[start]);                              &#x2F;&#x2F; 从cd复制编码串到编码域  &#125;  free(cd); &#x2F;&#x2F; 释放工作空间&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h2><p>或是空树，或满足下列条件：</p><ul><li>若它的左子树不空，则左子树所有节点的值均小于它根节点的值；</li><li>若它的右子树不空，则右子树所有节点的值均大于它根节点的值；</li><li>它的左右子树也分别为二叉排序树；</li></ul><p>其类型定义可类似于二叉链表如下：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef struct BiTNode&#123;  int data;  struct BiTNode *lchild, *rchild;&#125;BiTNode, *BiTree;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SearchBST"><a href="#SearchBST" class="headerlink" title="SearchBST"></a>SearchBST</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">BiTree SearchBST(BiTree T, keyType key)&#123; &#x2F;&#x2F;二叉排序树查找算法  if ((!T) || key &#x3D;&#x3D; T-&gt;data)    return T;  else if (key &lt; T-&gt;data) &#x2F;&#x2F; 关键字在左子树上    return SearchBST(T-&gt;lchild, key);  else    return SearchBST(T-&gt;rchild, key);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="InsertBST"><a href="#InsertBST" class="headerlink" title="InsertBST"></a>InsertBST</h3><p>在原有的查找算法中进行改进，用指针p返回访问时的最后的一个节点，便于最后进行插入；</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status SearchBST(BiTree T, keyType key, BiTree f, BiTree *p)&#123; &#x2F;&#x2F; 二叉排序树查找算法，p指向访问路径的最后一个节点  if (!T)  &#123;    p &#x3D; f;    return ERROR;  &#125;  else if (key &#x3D;&#x3D; T-&gt;data)  &#123;    p &#x3D; T;    return OK;  &#125;  else if (key &lt; T-&gt;data)    return SearchBST(T-&gt;lchild, key, T, p);  else    return SearchBST(T-&gt;rchild, key, T, p);&#125;Status InsertBST(BiTree *T, int e)&#123; &#x2F;&#x2F; 当二叉排序树中不存在关键字为e的数据元素是，插入并返回OK  BiTree p &#x3D; (BiTree)malloc(sizeof(BiTNode));  if (!SearchBST(T, e, NULL, &amp;p))  &#123;    BiTree s &#x3D; (BiTree)malloc(sizeof(BiTNode));    s-&gt;data &#x3D; e;    s-&gt;lchild &#x3D; s-&gt;rchild &#x3D; NULL;    &#x2F;&#x2F; 此时根据查找时访问的最后一个节点插入    if (!p)      *T &#x3D; s;    else if (e &lt; p-&gt;data)      p-&gt;lchild &#x3D; s;    else      p-&gt;rchild &#x3D; s;    return OK;  &#125;  else    return ERROR;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DeleteBST"><a href="#DeleteBST" class="headerlink" title="DeleteBST"></a>DeleteBST</h3><p>其中Delete函数实现对于节点的删除以及左右子树的重连；</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status DeleteBST(BiTree *T, keyType key)&#123; &#x2F;&#x2F; 删除关键字为key元素  if (!*T)    return ERROR;  else  &#123;    if (key &#x3D;&#x3D; (*T)-&gt;data) &#x2F;&#x2F; 进行删除      return Delete(T);    else if (key &lt; (*T)-&gt;data) &#x2F;&#x2F; 对左子树进行查找      return DeleteBST((*T)-&gt;lchild, key);    else      return DeleteBST((*T)-&gt;rchild, key);  &#125;  return OK;&#125;Status Delete(BiTree *p)&#123; &#x2F;&#x2F; 删除节点p，并重连它的左右子树  BiTree q &#x3D; (BiTree *)malloc(sizeof(BiTree));  BiTree s &#x3D; (BiTree *)malloc(sizeof(BiTree));  if (!(*p)-&gt;rchild)  &#123; &#x2F;&#x2F; 重接左子树    q &#x3D; *p;    *p &#x3D; (*p)-&gt;lchild;    free(q);  &#125;  else if (!(*p)-&gt;lchild)  &#123; &#x2F;&#x2F; 重接右子树    q &#x3D; *p;    *p &#x3D; (*p)-&gt;rchild;    free(q);  &#125;  else  &#123;    q &#x3D; *p;    s &#x3D; (*p)-&gt;lchild; &#x2F;&#x2F; 先向左    while (s-&gt;rchild)    &#123; &#x2F;&#x2F; 再向右到尽头，找到待删节点的前驱      q &#x3D; s;      s &#x3D; s-&gt;rchild;    &#125;    (*p)-&gt;data &#x3D; s-&gt;data; &#x2F;&#x2F; 将待删节点的值换为其前驱的值    &#x2F;&#x2F;分别重接q的左右子树    if (q !&#x3D; *p)      q-&gt;rchild &#x3D; s-&gt;lchild;    else      q-&gt;lchild &#x3D; s-&gt;lchild;    delete (s); &#x2F;&#x2F;删除前驱结点  &#125;  return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><p><strong>平衡二叉树</strong>是一种二叉排序树，其中每一个节点的左子树和右子树的高度差至多等于1；则显然，其要么是一颗空树，要么它的左右子树均是平衡二叉树，且深度之差绝对值不超过1；同时我们将二叉树上节点的左子树深度减去右子树深度的值称为**平衡因子BF(Balance Factor)**，则所有节点的平衡因子只可能是-1，0，1；</p><h3 id="平衡二叉树的插入"><a href="#平衡二叉树的插入" class="headerlink" title="平衡二叉树的插入"></a>平衡二叉树的插入</h3><h3 id="平衡二叉树的查找"><a href="#平衡二叉树的查找" class="headerlink" title="平衡二叉树的查找"></a>平衡二叉树的查找</h3><h2 id="B-树和B-树"><a href="#B-树和B-树" class="headerlink" title="B-树和B+树"></a>B-树和B+树</h2><h2 id="键树"><a href="#键树" class="headerlink" title="键树"></a>键树</h2><p>未完待续……</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String</title>
      <link href="/2023/01/20/string/"/>
      <url>/2023/01/20/string/</url>
      
        <content type="html"><![CDATA[<h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="类型定义"><a href="#类型定义" class="headerlink" title="类型定义"></a>类型定义</h2><p>串（字符串）是由零个或多个字符组成的有限序列；</p><ul><li><strong>串的长度</strong>：串中字符数目n称为<strong>串的长度</strong>；</li><li><strong>空串</strong>：零个字符的串称为<strong>空串</strong>，长度为零；</li><li><strong>子串</strong>：串中任意个连续的字符组成的子序列称为该串的<strong>子串</strong>；</li><li><strong>主串</strong>：包含子串的串相应地称为<strong>主串</strong>；</li><li><strong>位置</strong>：字符在序列中的序号为该字符在串中的<strong>位置</strong>；</li></ul><p><strong>抽象数据类型</strong></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">StrAssign(&amp;T, chars)          &#x2F;&#x2F;生成一个其值为chars的串TStrCopy(&amp;T, S)                &#x2F;&#x2F;由串S复制得串TStrEmpty(S, T)                &#x2F;&#x2F;若S为空串，则返回TRUE，否则返回FALSEStrCompare(S, T)              &#x2F;&#x2F;S &gt; T，返回值大于0；S &#x3D; T，返回值等于0； S &lt; T，返回值小于0 StrLength(S)                  &#x2F;&#x2F;返回S的元素个数，称为串的长度ClearString(&amp;S)               &#x2F;&#x2F;将S清为空串Concat(&amp;T, S1, S2)            &#x2F;&#x2F;T返回S1和S2连接的新串SubString(&amp;Sub, S, pos, len)  &#x2F;&#x2F;Sub返回串S的第pos个字符起长度为len的子串Index(S, T, pos)              &#x2F;&#x2F;返回主串S中第pos个字符之后第一次出现与串T相同的子串的位置，无则返回0Replace(&amp;S, T, V)             &#x2F;&#x2F;用V替换主串S中出现的所有与T相等的不重叠的子串StrInsert(&amp;S, pos, T)         &#x2F;&#x2F;在串S的pos个字符之前插入串TStrDelete(&amp;S, pos, len)       &#x2F;&#x2F;从串S中删除第pos个字符起长度为len的子串DestoryString(&amp;S)             &#x2F;&#x2F;销毁串S<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述13中操作中，StrAssign,StrCompare,StrLength,Concat,SubString五种操作构成串类型的最小操作子集；<br>如下根据最小操作子集实现Index操作：  </p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int Index(String S, String T, int pos)&#123;  if(pos &gt; 0)  &#123;    int n &#x3D; StrLength(S);    int m &#x3D; StrLength(T);    int i &#x3D; pos;    String sub;    while(i &lt;&#x3D; n - m + 1)    &#123; &#x2F;&#x2F;从S的pos位置后依次取T长度个的子串进行比较      SubString(sub, S, i, m);      if(StrCompare(sub, T) !&#x3D; 0)        i++;      else         return i;    &#125;  &#125;  return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="串的表示及实现"><a href="#串的表示及实现" class="headerlink" title="串的表示及实现"></a>串的表示及实现</h2><h3 id="定长顺序存储结构"><a href="#定长顺序存储结构" class="headerlink" title="定长顺序存储结构"></a>定长顺序存储结构</h3><p>用一组地址连续的储存单元存储，如下：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define MAXSTRLEN 255#define OK 1#define ERROR 0typedef int Status;typedef unsigned char SString[MAXSTRLEN + 1]; &#x2F;&#x2F;0号单元存放串的长度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h3><h4 id="Concat"><a href="#Concat" class="headerlink" title="Concat"></a>Concat</h4><h3 id="堆分配存储结构"><a href="#堆分配存储结构" class="headerlink" title="堆分配存储结构"></a>堆分配存储结构</h3><p>仍采用一组地址连续的储存单元存放，但存储空间采取动态分配，如下：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef struct&#123;  char *ch;  int length;&#125;HString;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基本实现-1"><a href="#基本实现-1" class="headerlink" title="基本实现"></a>基本实现</h3><h3 id="块链存储结构"><a href="#块链存储结构" class="headerlink" title="块链存储结构"></a>块链存储结构</h3><p>采取链表形式存储串值，用户自定义节点即块的大小，称之为块链结构；  </p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define CHUNKSIZE 80  &#x2F;&#x2F;自定义块的大小typedef struct Chunk&#123;  char ch[CHUNKSIZE];  struct Chunk *next;&#125;Chunk;typedef struct&#123;  Chunk *head, *tail; &#x2F;&#x2F;串的头尾指针  int curlen;         &#x2F;&#x2F;当前长度&#125;LString;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模式匹配算法"><a href="#模式匹配算法" class="headerlink" title="模式匹配算法"></a>模式匹配算法</h2><h3 id="求子串位置的定位函数Index-S-T-pos"><a href="#求子串位置的定位函数Index-S-T-pos" class="headerlink" title="求子串位置的定位函数Index(S, T, pos)"></a>求子串位置的定位函数Index(S, T, pos)</h3><p>子串的定位操作称作串的<strong>模式匹配</strong>，其中T称为<strong>模式串</strong>；<br>如下采取定长顺序存储结构，实现不依赖其他串操作的匹配算法：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int Index(SString S, SString T, int pos)&#123; &#x2F;&#x2F;返回子串T在主串S中第pos个字符之后的位置，若不存在，返回0  int i &#x3D; pos, j &#x3D; 1;  while(i &lt;&#x3D; S[0] &amp;&amp; j &lt;&#x3D; T[0])  &#123;    if(S[i] &#x3D;&#x3D; T[j])    &#123;      i++;      j++;    &#125;    else    &#123; &#x2F;&#x2F;指针回退，重新匹配      i &#x3D; i - j + 2;      j &#x3D; 1;    &#125;  &#125;  if(j &gt; T[0])    return i - T[0];  else     return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过，有些情况下，该算法的效率较低，比如模式串为 00000001 ，主串为 00000000000000000000000000000000000000000000000000001 时，时间复杂度达到O(n*m);</p><h3 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h3><h2 id="串的应用"><a href="#串的应用" class="headerlink" title="串的应用"></a>串的应用</h2>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Queue</title>
      <link href="/2023/01/20/queue/"/>
      <url>/2023/01/20/queue/</url>
      
        <content type="html"><![CDATA[<h1 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h1><h2 id="类型定义"><a href="#类型定义" class="headerlink" title="类型定义"></a>类型定义</h2><p>队列是一种先进先出(first in first out FIFO)的线性表，只允许在表的一端插入元素，另一端删除；允许插入的一端称为队尾，允许删除的一端称为队头；<br><strong>抽象数据类型</strong></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">InitQueue(&amp;Q)               &#x2F;&#x2F;构造空队列QDestroyQueue(&amp;Q)            &#x2F;&#x2F;销毁队列QClearQueue(&amp;Q)              &#x2F;&#x2F;将Q清为空队列QueueEmpty(&amp;Q)              &#x2F;&#x2F;若Q为空队列，返回TRUE，否则FALSEQueueLength(Q)              &#x2F;&#x2F;返回Q的元素个数，即队列长度GetHead(Q, &amp;e)              &#x2F;&#x2F;用e返回Q的队头元素EnQueue(&amp;Q, e)              &#x2F;&#x2F;插入元素e为新的队尾元素DeQueue(&amp;Q, &amp;e)             &#x2F;&#x2F;删除Q的队头元素，并用e返回其值QueueTraverse(Q, visit())   &#x2F;&#x2F;从队头到队尾，依次对Q的每个数据元素调用函数visit()，visit()失败，操作失败<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h2><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><p>若采取顺序栈的结构将会造成假溢出，将顺序栈的结构改善为环状空间，可充分利用分配的存储空间，称之为循环队列；<br>注意此时仅凭借Q-&gt;front &#x3D;&#x3D; Q-&gt;rear并不能判断队列空间为“空”还是“满”，可有如下处理方法：  </p><ul><li>设置一个标志位以区别队列为“空”还是“满”；</li><li>减少一个元素空间的使用，队列头指针在队列尾指针的下一位置作为队列“满”的标志；</li></ul><p>在这里采取第二种处理方式，Q-&gt;front &#x3D;&#x3D; Q-&gt;rear仅作为队列空的标志；</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define MAXQSIZE 100typedef int QElemType;typedef struct &#123;  QElemType *base;  &#x2F;&#x2F;初始化的动态分配存储空间  int front;        &#x2F;&#x2F;头指针，若不空，指向队列头元素  int rear;         &#x2F;&#x2F;尾指针，若不空，指向队列尾元素的下一个位置&#125;SqQueue;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h3><h4 id="InitQueue"><a href="#InitQueue" class="headerlink" title="InitQueue"></a>InitQueue</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status InitQueue(SqQueue *Q)&#123; &#x2F;&#x2F; 构造空队列  Q-&gt;base &#x3D; (QElemType *)malloc(MAXQSIZE * sizeof(QElemType));  if (!Q-&gt;base)    return ERROR;  Q-&gt;front &#x3D; Q-&gt;rear &#x3D; 0;  return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="QueueLength"><a href="#QueueLength" class="headerlink" title="QueueLength"></a>QueueLength</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">int QueueLength(SqQueue Q)&#123; &#x2F;&#x2F; 返回队列长度  return (Q.rear - Q.front + MAXQSIZE) % MAXQSIZE;  &#x2F;&#x2F; 考虑到相减后结果可能是负数，因此要加上MAXQSIZE&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="EnQueue"><a href="#EnQueue" class="headerlink" title="EnQueue"></a>EnQueue</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status EnQueue(SqQueue *Q, QElemType e)&#123; &#x2F;&#x2F; 插入新的队尾元素e  &#x2F;&#x2F; 队列满  if ((Q-&gt;rear + 1) % MAXQSIZE &#x3D;&#x3D; Q-&gt;front)    return ERROR;  Q-&gt;base[Q-&gt;rear] &#x3D; e;  Q-&gt;rear &#x3D; (Q-&gt;rear + 1) % MAXQSIZE;  return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DeQueue"><a href="#DeQueue" class="headerlink" title="DeQueue"></a>DeQueue</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status DeQueue(SqQueue *Q, QElemType *e)&#123; &#x2F;&#x2F; 删除队头元素，并用e返回其值  if (Q-&gt;front &#x3D;&#x3D; Q-&gt;rear)    return ERROR;  *e &#x3D; Q-&gt;base[Q-&gt;front];  Q-&gt;front &#x3D; (Q-&gt;front + 1) % MAXQSIZE;  return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">int main()&#123;  SqQueue *Q &#x3D; (SqQueue *)malloc(sizeof(SqQueue));  InitQueue(Q);  EnQueue(Q, 1);  printf(&quot;%d %d %d\n&quot;, Q-&gt;base[Q-&gt;front], Q-&gt;base[Q-&gt;rear - 1], QueueLength(*Q));  EnQueue(Q, 2);  printf(&quot;%d %d %d\n&quot;, Q-&gt;base[Q-&gt;front], Q-&gt;base[Q-&gt;rear - 1], QueueLength(*Q));  int *e &#x3D; (int *)malloc(sizeof(int));  DeQueue(Q, e);  printf(&quot;%d %d %d\n&quot;, Q-&gt;base[Q-&gt;front], Q-&gt;base[Q-&gt;rear - 1], QueueLength(*Q));  printf(&quot;%d\n&quot;, *e);  return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="链式存储结构"></a>链式存储结构</h2><h3 id="存储结构-1"><a href="#存储结构-1" class="headerlink" title="存储结构"></a>存储结构</h3><p>单链队列，队列的链式存储结构，链队列同时也添加一个头结点，并令头指针指向头结点，头指针与尾指针均指向头结点即空的链队列的判定条件；</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef int QElemType;typedef struct QNode&#123;  QElemType data;  struct QNode *next;&#125;QNode, *QueuePtr;typedef struct&#123;  QueuePtr front;   &#x2F;&#x2F;队头  QueuePtr rear;    &#x2F;&#x2F;队尾&#125;LinkQueue;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基本实现-1"><a href="#基本实现-1" class="headerlink" title="基本实现"></a>基本实现</h3><h4 id="InitQueue-1"><a href="#InitQueue-1" class="headerlink" title="InitQueue"></a>InitQueue</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status InitQueue(LinkQueue *Q)&#123; &#x2F;&#x2F; 构造空队列Q  Q-&gt;front &#x3D; Q-&gt;rear &#x3D; (QueuePtr)malloc(sizeof(QNode));  if (!Q-&gt;front)    return ERROR;  Q-&gt;front-&gt;next &#x3D; NULL;  return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DestoryQueue"><a href="#DestoryQueue" class="headerlink" title="DestoryQueue"></a>DestoryQueue</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status DestoryQueue(LinkQueue *Q)&#123; &#x2F;&#x2F; 销毁队列Q  while (Q-&gt;front)  &#123; &#x2F;&#x2F; 从队头向后依次销毁    Q-&gt;rear &#x3D; Q-&gt;front-&gt;next;    free(Q-&gt;front);    Q-&gt;front &#x3D; Q-&gt;rear;  &#125;  return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="EnQueue-1"><a href="#EnQueue-1" class="headerlink" title="EnQueue"></a>EnQueue</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status EnQueue(LinkQueue *Q, QElemType e)&#123; &#x2F;&#x2F; 插入元素e为新的队尾元素  QueuePtr p &#x3D; (QueuePtr)malloc(sizeof(QNode));  if (!p)    return ERROR;  p-&gt;data &#x3D; e;  p-&gt;next &#x3D; NULL;  Q-&gt;rear-&gt;next &#x3D; p;  Q-&gt;rear &#x3D; p; &#x2F;&#x2F; 更新队尾指针  return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DeQueue-1"><a href="#DeQueue-1" class="headerlink" title="DeQueue"></a>DeQueue</h4><p>注意队头指针指向头结点，需要删除的是Q-&gt;front-&gt;next该节点；</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status DeQueue(LinkQueue *Q, QElemType *e)&#123; &#x2F;&#x2F; 删除队头元素，并用e返回其值  if (Q-&gt;front &#x3D;&#x3D; Q-&gt;rear)    return ERROR;  QueuePtr p &#x3D; (QueuePtr)malloc(sizeof(QNode));  p &#x3D; Q-&gt;front-&gt;next;  Q-&gt;front-&gt;next &#x3D; p-&gt;next; &#x2F;&#x2F; 无需修改头结点  if (Q-&gt;rear &#x3D;&#x3D; p)    Q-&gt;rear &#x3D; Q-&gt;front;  free(p);  return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">int main()&#123;  LinkQueue *Q &#x3D; (LinkQueue *)malloc(sizeof(LinkQueue));  InitQueue(Q);  EnQueue(Q, 1);  printf(&quot;%d %d\n&quot;, Q-&gt;front-&gt;next-&gt;data, Q-&gt;rear-&gt;data);  EnQueue(Q, 2);  printf(&quot;%d %d\n&quot;, Q-&gt;front-&gt;next-&gt;data, Q-&gt;rear-&gt;data);  int *e &#x3D; (int *)malloc(sizeof(int));  DeQueue(Q, e);  printf(&quot;%d %d\n&quot;, Q-&gt;front-&gt;next-&gt;data, Q-&gt;rear-&gt;data);  DestoryQueue(Q);  return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h2><p>双端队列(double ended queue, deque)是限定插入和删除操作在表的两端进行的线性表；<br>在实际使用中还有，输出受限的双端队列（一个端点允许插入删除，另一个端点只允许插入），输入受限的双端队列（一个端点允许插入删除，另一个端点只允许删除）；若限定双端队列从某个端点插入只能在该端点删除，即演变为两个栈底相邻接的栈；</p><p>未完待续……</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stack</title>
      <link href="/2023/01/19/stack/"/>
      <url>/2023/01/19/stack/</url>
      
        <content type="html"><![CDATA[<h1 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h1><h2 id="类型定义"><a href="#类型定义" class="headerlink" title="类型定义"></a>类型定义</h2><p>栈是限定仅在表尾进行插入和删除操作的线性表，又称为后进先出(last in first out)的线性表(LIFO结构)，表尾称为栈顶，表头称为栈底，不含元素则称为空栈；<br><strong>抽象数据类型</strong>:</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">InitStack(&amp;S)               &#x2F;&#x2F;构造空栈SDestoryStack(&amp;S)            &#x2F;&#x2F;销毁栈SClearStack(&amp;S)              &#x2F;&#x2F;将S清为空栈StackEmpty(S)               &#x2F;&#x2F;若S为空栈返回TRUE,否则FALSEStackLength(S)              &#x2F;&#x2F;返回栈S的元素个数，即栈的长度GetTop(S, &amp;e)               &#x2F;&#x2F;用e返回S的栈顶元素Push(&amp;S, e)                 &#x2F;&#x2F;插入元素e为新的栈顶元素Pop(&amp;S, &amp;e)                 &#x2F;&#x2F;删除S的栈顶元素，并用e返回其值StackTraverse(S, visit())   &#x2F;&#x2F;从栈顶到栈底依次对S的每个元素调用visit(),visit()失败则操作失败<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h2><h3 id="存储表示"><a href="#存储表示" class="headerlink" title="存储表示"></a>存储表示</h3><p>其中base为NULL时表示栈结构不存在，top&#x3D;&#x3D;base可作为栈空的标记;  </p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define STACK_INIF_SIZE 100  &#x2F;&#x2F;存储空间初始分配量#define STACKINCREMENT 10    &#x2F;&#x2F;存储空间分配增量#define OK 1#define ERROR 0typedef int SElemType;typedef int Status;typedef struct&#123;  SElemType *base;            &#x2F;&#x2F;栈不存在为NULL  SElemType *top;  int stacksize;&#125;SqStack;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h3><h4 id="InitStack"><a href="#InitStack" class="headerlink" title="InitStack"></a>InitStack</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status InitStack(SqStack *S)&#123; &#x2F;&#x2F; 构造空栈S  S-&gt;base &#x3D; (SElemType *)malloc(STACK_INIF_SIZE * sizeof(SElemType));  if (!S-&gt;base)    return ERROR;  S-&gt;top &#x3D; S-&gt;base;  S-&gt;stacksize &#x3D; STACK_INIF_SIZE;  return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="GetTop"><a href="#GetTop" class="headerlink" title="GetTop"></a>GetTop</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status GetTop(SqStack S, SElemType *e)&#123; &#x2F;&#x2F; 若栈不空，用e返回S的栈顶元素  if (S.top &#x3D;&#x3D; S.base)    return ERROR;  (*e) &#x3D; *(S.top - 1);  return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status Push(SqStack *S, SElemType e)&#123; &#x2F;&#x2F; 插入元素e为栈顶元素  if (S-&gt;top - S-&gt;base &gt;&#x3D; S-&gt;stacksize)  &#123; &#x2F;&#x2F; 栈满，追加储存空间    S-&gt;base &#x3D; (SElemType *)realloc(S-&gt;base, (S-&gt;stacksize + STACKINCREMENT) * sizeof(SElemType));    if (!S-&gt;base)      return ERROR;    S-&gt;top &#x3D; S-&gt;base + S-&gt;stacksize;    S-&gt;stacksize +&#x3D; STACKINCREMENT;  &#125;  *S-&gt;top++ &#x3D; e;  return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Pop"><a href="#Pop" class="headerlink" title="Pop"></a>Pop</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status Pop(SqStack *S, SElemType *e)&#123; &#x2F;&#x2F; 若栈不空，则删除S的栈顶元素，并用e返回其值  if (S-&gt;top &#x3D;&#x3D; S-&gt;base)    return ERROR;  (*e) &#x3D; *--S-&gt;top;  return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">int main()&#123;  SqStack *S &#x3D; (SqStack *)malloc(sizeof(SqStack));  InitStack(S);  Push(S, 1);  printf(&quot;%d %d\n&quot;, *S-&gt;base, *(S-&gt;top - 1));  Push(S, 2);  printf(&quot;%d %d\n&quot;, *S-&gt;base, *(S-&gt;top - 1));  int *e &#x3D; (int *)malloc(sizeof(int));  Pop(S, e);  printf(&quot;%d %d\n&quot;, *S-&gt;base, *(S-&gt;top - 1));  printf(&quot;%d&quot;, *e);  return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="链式存储结构"></a>链式存储结构</h2><h3 id="存储表示-1"><a href="#存储表示-1" class="headerlink" title="存储表示"></a>存储表示</h3><p>链式存储便于多个栈共享存储空间以及提高其效率，且不存在栈满的情况，通常采用单链表实现，并规定所有操作都是在表头进行；这里没有头结点，直接指向栈顶元素，对于空栈即top &#x3D;&#x3D; base &#x3D; NULL；  </p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;节点typedef struct StackNode&#123;   ElemType data;  struct StackNode *next;&#125;StackNode, *LinkStackPrt;&#x2F;&#x2F;链栈typedef struct LinkStack&#123;  LinkStackPrt top;  int count;&#125;LinkStack;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基本实现-1"><a href="#基本实现-1" class="headerlink" title="基本实现"></a>基本实现</h3><h4 id="Push-1"><a href="#Push-1" class="headerlink" title="Push"></a>Push</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status Push(LinkStack *S, ElemType e)&#123; &#x2F;&#x2F;插入新栈顶元素e  &#x2F;&#x2F;创建新节点  LinkStackPrt p &#x3D; (LinkStackPrt)malloc(sizeof(StackNode));  p-&gt;data &#x3D; e;  p-&gt;next &#x3D; S-&gt;top;  S-&gt;top &#x3D; p;  S-&gt;count++;  return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Pop-1"><a href="#Pop-1" class="headerlink" title="Pop"></a>Pop</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status Pop(LinkStack *S, ElemType *e)&#123;  LinkStackPrt P;  if(StackEmpty(*S))    return ERROR;  *e &#x3D; S-&gt;top-&gt;data;  p &#x3D; S-&gt;top;  S-&gt;top &#x3D; S-&gt;top-&gt;next;  free(p);  S-&gt;count--;  return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h2><h3 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h3><h4 id="波兰式（前缀表达式）"><a href="#波兰式（前缀表达式）" class="headerlink" title="波兰式（前缀表达式）"></a>波兰式（前缀表达式）</h4><p><strong>从左向右读入表达式，如果一个操作符后面跟着两个操作数时，将计算结果作为操作数替换这个操作符和两个操作数，直至计算完成；</strong><br>such as 2 + 3 * (5 - 1)，其波兰式为 + 2 * 3 - 5 1；</p><h4 id="逆波兰式（后缀表达式）"><a href="#逆波兰式（后缀表达式）" class="headerlink" title="逆波兰式（后缀表达式）"></a>逆波兰式（后缀表达式）</h4><p>相较于波兰式，逆波兰式要更为直接，<strong>当遇到操作符时，将前面两个操作数与这个操作符进行计算，结果替换；</strong><br>如上的 2 + 3 * (5 - 1)用逆波兰式表示为 2 3 5 1 - * +;<br>这个过程很容易用栈来实现，将2, 3, 5, 1依次压入栈中，当压入 - 时，判定为操作符，Pop 5, 1,计算结果后再压入栈中，直至压入完成，栈中元素即运算结果；</p><h4 id="中缀表达式转化为逆波兰式"><a href="#中缀表达式转化为逆波兰式" class="headerlink" title="中缀表达式转化为逆波兰式"></a>中缀表达式转化为逆波兰式</h4><p>由于计算机中广泛应用后缀表达式，因此中缀表达式转为后缀表达式很有必要；<br><strong>从左向右遍历，遇到数字，输出到逆波兰式中；遇到符号，判断其与栈顶符号的优先级，是右括号或者优先级低于栈顶符号，则栈顶元素依次出栈并输出到逆波兰式中，并将当符号进栈，直至输出结束</strong></p><p>如 2 + 3 * (5 - 1)则过程如下：  </p><ul><li>2，输出到表达式中，2，栈为空；</li><li>+，到栈中，2，+；</li><li>3，输出到表达式中，2 3，+；</li><li>*，到栈中，2 3，+ *；</li><li>（，到栈中，2 3，+ * （；</li><li>5，表达式，2 3 5，+ * （；</li><li>-，栈中，2 3 5，+ * （ -；</li><li>1，表达式，2 3 5 1，+ * （ -；</li><li>），栈顶元素依次出栈并输出到表达式中，即2 3 5 1 - * +；</li></ul><h3 id="行编辑程序"><a href="#行编辑程序" class="headerlink" title="行编辑程序"></a>行编辑程序</h3><p>在栈的功能下，实现用户在终端输入出现差错时，及时更正；</p><h3 id="栈与递归的实现"><a href="#栈与递归的实现" class="headerlink" title="栈与递归的实现"></a>栈与递归的实现</h3><p>……</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linear_list</title>
      <link href="/2023/01/18/linear-list/"/>
      <url>/2023/01/18/linear-list/</url>
      
        <content type="html"><![CDATA[<h1 id="Linear-list"><a href="#Linear-list" class="headerlink" title="Linear_list"></a>Linear_list</h1><h2 id="类型定义"><a href="#类型定义" class="headerlink" title="类型定义"></a>类型定义</h2><p>一个线性表是n个数据元素的有限序列，线性表中的元素个数n定义为线性表的长度，n&#x3D;0时成为空表；<br>抽象数据类型：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">InitList(&amp;L)                &#x2F;&#x2F;构造空线性表LDestroyList(&amp;L)             &#x2F;&#x2F;销毁线性表LClearList(&amp;L)               &#x2F;&#x2F;将L重置为空表ListEmpty(L)                &#x2F;&#x2F;若L为空表返回TRUE，否则返回FALSEListLength(L)               &#x2F;&#x2F;返回L中数据元素个数GetElem(L, i, &amp;e)           &#x2F;&#x2F;用e返回L中第i个元素的值&#x2F;&#x2F;不常用LocateElem(L, e, compare()) &#x2F;&#x2F;返回L中第一个与e满足关系compare()的数据元素的位序，若不存在，则返回0PriorElem(L, cur_e, &amp;pre_e) &#x2F;&#x2F;用pre_e返回L中数据元素cur_e的前驱NextElem(L, cur_e, &amp;next_e) &#x2F;&#x2F;用next_e返回L中数据元素cur_e的后继ListInsert(&amp;L, i, e)        &#x2F;&#x2F;在L的第i个位置前插入新数据元素e，长度更新ListDelete(&amp;L, i, &amp;e)       &#x2F;&#x2F;删除L的第i个数据元素，并用e返回其值，长度更新ListTraverse(L, visit())    &#x2F;&#x2F;依次对L的每个数据元素调用函数visit()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="顺序表示和实现"><a href="#顺序表示和实现" class="headerlink" title="顺序表示和实现"></a>顺序表示和实现</h2><h3 id="顺序表示"><a href="#顺序表示" class="headerlink" title="顺序表示"></a>顺序表示</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define MAXSIZE 20#define OK 1#define ERROR 0typedef struct&#123;  ElemType *elem;  int length;&#125;SqList;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h3><h4 id="InitList"><a href="#InitList" class="headerlink" title="InitList"></a>InitList</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status InitList(SqList *L)&#123; &#x2F;&#x2F;构造空线性表  L-&gt;elem &#x3D; (ElemType *)malloc(MAXSIZE * sizeof(ElemType));  if(!L-&gt;elem)    return ERROR;  L-&gt;length &#x3D; 0;  return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ListInsert"><a href="#ListInsert" class="headerlink" title="ListInsert"></a>ListInsert</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status ListInsert(SqList *L, int i, ElemType e)&#123; &#x2F;&#x2F;顺序表插入  int k;  if(i &lt; 1 || i &gt; L-&gt;length + 1)    return ERROR;  for(k &#x3D; L-&gt;length - 1; k &gt;&#x3D; i - 1; k--)    L-&gt;elem[k + 1] &#x3D; L-&gt;elem[k];  L-elem[i - 1] &#x3D; e;  L-&gt;length++;  return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ListDelete"><a href="#ListDelete" class="headerlink" title="ListDelete"></a>ListDelete</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status ListDelete(SqList *L, int i, ElemType *e)&#123; &#x2F;&#x2F;顺序表删除  int k;  if(i &lt; 1 || i &gt; L-&gt;length)    return ERROR;  *e &#x3D; L-&gt;elem[i - 1];  if(i &lt; L-&gt;length)  &#123;    for(k &#x3D; i; k &lt; L-&gt;length; k++)      L-&gt;elem[k - 1] &#x3D; L-&gt;elem[k];  &#125;  L-&gt;length--;  return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链式表示和实现"><a href="#链式表示和实现" class="headerlink" title="链式表示和实现"></a>链式表示和实现</h2><h3 id="链式表示"><a href="#链式表示" class="headerlink" title="链式表示"></a>链式表示</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define OK 1#define ERROR 0typedef int Status;typedef int ElemType;&#x2F;&#x2F;节点结构体typedef struct Node&#123;  ElemType data;  struct Node *next;&#125;Node;&#x2F;&#x2F;单链表typedef struct&#123;  int length;  Node *next; &#x2F;&#x2F;头指针(不储存任何值)，指向头结点&#125;*LinkList;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基本实现-1"><a href="#基本实现-1" class="headerlink" title="基本实现"></a>基本实现</h3><h4 id="InitList-1"><a href="#InitList-1" class="headerlink" title="InitList"></a>InitList</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status InitList(LinkList *L)&#123; &#x2F;&#x2F;创建单链表以及新节点  LinkList p &#x3D; (LinkList)malloc(sizeof(LinkList));  Node *q &#x3D; (Node *)malloc(sizeof(Node));   &#x2F;&#x2F;创建头结点  q-&gt;next &#x3D; NULL;  p-&gt;next &#x3D; q;  p-&gt;length &#x3D; 0;  (*L) &#x3D; p;  return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ListInsert-1"><a href="#ListInsert-1" class="headerlink" title="ListInsert"></a>ListInsert</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status ListInsert(LinkList *L, ElemType elem. int pos)&#123; &#x2F;&#x2F;单链表插入  if(pos &lt; 1 || pos &gt; (*L)-&gt;length + 1)    return ERROR;     &#x2F;&#x2F;范围  Node *p &#x3D; (*L)-&gt;next;  for(int i &#x3D; 1; i &lt; pos; i++)    p &#x3D; p-&gt;next;  &#x2F;&#x2F;创建新节点插入  Node *q &#x3D; (Node *)malloc(sizeof(Node));  q-&gt;data &#x3D; elem;  q-&gt;next &#x3D; p-&gt;next;  p-&gt;next &#x3D; q;  (*L)-&gt;length +&#x3D; 1;  return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ListDelete-1"><a href="#ListDelete-1" class="headerlink" title="ListDelete"></a>ListDelete</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status ListDelete(LinkList *L, ElemType *elem, int pos)&#123; &#x2F;&#x2F;单链表删除  if(pos &lt; 1 || pos &gt; (*L)-&gt;length)    return ERROR;  &#x2F;&#x2F;查找  Node *p &#x3D; (*L)-&gt;next, *q;  for(int i &#x3D; 0; i &lt; pos; i++)    p &#x3D; p-&gt;next;  &#x2F;&#x2F;删除  q &#x3D; p-&gt;next;  p-&gt;next &#x3D; q-&gt;next;  free(q);  (*L)-&gt;length -&#x3D; 1;  return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><p>表中最后一个节点的指针域指向头结点，整个链表形成一个环；</p><p>考虑此时查找最后一个节点时其时间复杂度为O(n)，可对此优化在循环链表中设立尾指针；同时这样也可简化某些操作，比如两个线性表合并时，仅需将表的表尾与另一个表的表头相接；</p><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><p>在双向链表的节点中有两个指针域，即后继与前驱；</p><pre class="line-numbers language-none"><code class="language-none">typedef struct DuLNode&#123;  ElemType data;  struct DuLNode *prior;  struct DuLNode *next;&#125;DuLNode, *DuLinkList;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基本实现-2"><a href="#基本实现-2" class="headerlink" title="基本实现"></a>基本实现</h3><h4 id="ListInsert-2"><a href="#ListInsert-2" class="headerlink" title="ListInsert"></a>ListInsert</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status ListInsert(DuLinkList *L, int i, ElemType e)&#123; &#x2F;&#x2F;插入操作  DuLNode *p, *s &#x3D; (DuLNode *)malloc(sizeof(DuLNode));  &#x2F;&#x2F;查找位置  if(!(p &#x3D; GetElemP_DuL(L, i)))    return ERROR;  s-&gt;data &#x3D; e;  &#x2F;&#x2F;更新s前驱  s-&gt;prior &#x3D; p-&gt;prior;  p-&gt;prior-&gt;next &#x3D; s;  &#x2F;&#x2F;更新s后继  s-&gt;next &#x3D; p;  p-&gt;prior &#x3D; s;  return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ListDelete-2"><a href="#ListDelete-2" class="headerlink" title="ListDelete"></a>ListDelete</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status ListDelete(LinkList *L, int i, ElemType *e)&#123; &#x2F;&#x2F;删除操作  DuLNode *p;  if(!(p &#x3D; GetElemP_DuL(L, i)))    return ERROR;  (*e) &#x3D; p-&gt;data;  p-&gt;prior-&gt;next &#x3D; p-&gt;next;  p-&gt;next-&gt;prior &#x3D; p-&gt;prior;  free(p);  return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h2><h3 id="存储结构-1"><a href="#存储结构-1" class="headerlink" title="存储结构"></a>存储结构</h3><p>借用一维数组来描述线性链表，便于在不设“指针”类型的高级程序设计语言中使用链表结构；<br>游标指向下一个节点，在作线性表的插入和删除操作时无需移动元素，仅需修改指针；<br>其中未被使用的数组成为备用链表，插入时从其中取得，删除时回收到备用链表中；同时规定下标为0的cur为备用链表第一个节点的下标，数组最后一个元素的cur为第一个有数值的元素的下标，若链表为空，则为0；</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;静态单链表存储结构#define MAXSIZE 1000  &#x2F;&#x2F;链表最大长度typedef struct&#123;  ElemType data;  int cur;  &#x2F;&#x2F;游标，为0时无指向&#125;component, SLinkList[MAXSIZE];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基本实现-3"><a href="#基本实现-3" class="headerlink" title="基本实现"></a>基本实现</h3><h4 id="InitSpace-SL"><a href="#InitSpace-SL" class="headerlink" title="InitSpace_SL"></a>InitSpace_SL</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">void InitSpace_SL(SLinkList *space)&#123; &#x2F;&#x2F; 将一维数组space中各分量链成一个备用链表，space[0].cur为头指针  for (int i &#x3D; 0; i &lt; MAXSIZE - 1; i++)    space[i]-&gt;cur &#x3D; i + 1;  space[MAXSIZE - 1]-&gt;cur &#x3D; 0;  &#x2F;&#x2F;无指向&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="LocateElem-SL"><a href="#LocateElem-SL" class="headerlink" title="LocateElem_SL"></a>LocateElem_SL</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status LocateElem_SL(SLinkList *S, ElemType e)&#123; &#x2F;&#x2F; 查找元素，返回位序  int i &#x3D; S[0]-&gt;cur;  while (i &amp;&amp; S[i]-&gt;data !&#x3D; e)    i &#x3D; S[i]-&gt;cur;  return i;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Malloc-SL"><a href="#Malloc-SL" class="headerlink" title="Malloc_SL"></a>Malloc_SL</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">int Malloc_SL(SLinkList space)&#123; &#x2F;&#x2F; 若备用空间链表非空，返回分配的节点下标，否则为0  int i &#x3D; space[0].cur; &#x2F;&#x2F; 每次从头结点开始  if (space[0].cur)     &#x2F;&#x2F; 可分配    space[0].cur &#x3D; space[i].cur;  return i;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Free-SL"><a href="#Free-SL" class="headerlink" title="Free_SL"></a>Free_SL</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">void Free_SL(SLinkList *space, int k)&#123; &#x2F;&#x2F; 将下标为k的空闲节点回收到备用链表  space[k]-&gt;cur &#x3D; space[0]-&gt;cur;  space[0]-&gt;cur &#x3D; k;  &#x2F;&#x2F; 相当于在0与其[0].cur之间插入k&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ListInsert-3"><a href="#ListInsert-3" class="headerlink" title="ListInsert"></a>ListInsert</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status ListInsert(component *L, int i, ElemType e)&#123; &#x2F;&#x2F;插入操作  if(i &lt; 1 || i &gt; ListLength(L) + 1)    return ERROR;  &#x2F;&#x2F;获取空间  int k &#x3D; Malloc_SL(L);  n &#x3D; MAXSIZE - 1;  &#x2F;&#x2F;从最后一个元素开始，即头结点  if(k)  &#123;    L[k].data &#x3D; e;    for(int l &#x3D; 1; l &lt;&#x3D; i - 1; l++)      n &#x3D; L[n]-&gt;cur;        &#x2F;&#x2F;找到第i个元素前的下标    L[k]-&gt;cur &#x3D; L[n]-&gt;cur;      L[n]-&gt;cur &#x3D; k;          &#x2F;&#x2F;插入    return OK;  &#125;  return ERROR;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ListDelete-3"><a href="#ListDelete-3" class="headerlink" title="ListDelete"></a>ListDelete</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">Status ListDelete(component *L, int i)&#123;  if(i &lt; 1 || i &gt; ListLength(L) + 1)    return ERROR;  int n &#x3D; MAXSIZE - 1;  for(int j &#x3D; 1; j &lt;&#x3D; i - 1; j++)    n &#x3D; L[n].cur;           &#x2F;&#x2F;查找  j &#x3D; L[n].cur;  L[n].cur &#x3D; L[j].cur;      &#x2F;&#x2F;删除&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归尘</title>
      <link href="/2023/01/16/gui-chen/"/>
      <url>/2023/01/16/gui-chen/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6842b945ead2ffaac55e194d896965ec969942a0fa2d2dde28f4057e44ee6ff8"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> lives </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lives </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建指南</title>
      <link href="/2023/01/11/test-post/"/>
      <url>/2023/01/11/test-post/</url>
      
        <content type="html"><![CDATA[<p>Hello, everyone.</p><p>注明：本博客搭建借鉴于<a href="https://xkz0777.github.io/2021/07/19/build-website/">xkz</a>以及<a href="https://ysy-phoenix.github.io/2021/04052690.html">ysy</a>，还有最初的<a href="https://godweiyang.com/2018/04/13/hexo-blog/">godweiyang</a>的博客搭建指南，参考注意有先后顺序，避免一些过时的问题。</p><h2 id="引用图片"><a href="#引用图片" class="headerlink" title="引用图片"></a>引用图片</h2><p><strong>推荐使用图床上传</strong>，便于加快访问速度  </p><h3 id="本地资源导入"><a href="#本地资源导入" class="headerlink" title="本地资源导入"></a>本地资源导入</h3><img src="cover.jpg" alt="相对路径图片" style="zoom:33%;" /><p>添加方式：<br>在博客根目录下的_config.yml配置文件中，设置  </p><pre class="line-numbers language-none"><code class="language-none">post_asset_folder: true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过命令hexo new post xxx，在source文件夹中生成xxx.md以及同名资源文件夹，之后如下形式引用：  </p><pre class="line-numbers language-none"><code class="language-none">&lt;img src&#x3D;&quot;cover.jpg&quot; alt&#x3D;&quot;相对路径图片&quot; style&#x3D;&quot;zoom:33%;&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="图床上传"><a href="#图床上传" class="headerlink" title="图床上传"></a>图床上传</h3><p><a href="https://imgse.com/i/pSKHRX9"><img src="https://s1.ax1x.com/2023/01/13/pSKHRX9.md.jpg" alt="图床照片"></a></p><p>添加方式：<br>搜索图床，选择合适的即可，可参考<a href="https://imgse.com/">这里</a></p><h2 id="添加友情链接"><a href="#添加友情链接" class="headerlink" title="添加友情链接"></a>添加友情链接</h2><p>在根目录sourse&#x2F;_data&#x2F;friends.json文件下设置，例如：  </p><pre class="line-numbers language-none"><code class="language-none">[  &#123;    &quot;avatar&quot;: &quot;https:&#x2F;&#x2F;ysy-phoenix.github.io&#x2F;medias&#x2F;avatar.jpg&quot;,    &quot;name&quot;: &quot;ysy&quot;,    &quot;introduction&quot;: &quot;ysy&quot;,    &quot;url&quot;: &quot;https:&#x2F;&#x2F;ysy-phoenix.github.io&#x2F;&quot;,    &quot;title&quot;: &quot;ysy的博客&quot;  &#125;,  &#123;    &quot;avatar&quot;: &quot;https:&#x2F;&#x2F;i.loli.net&#x2F;2021&#x2F;07&#x2F;12&#x2F;zWQo2VrLBstvDEU.jpg&quot;,    &quot;name&quot;: &quot;lly&quot;,    &quot;introduction&quot;: &quot;lly&quot;,    &quot;url&quot;: &quot;http:&#x2F;&#x2F;home.ustc.edu.cn&#x2F;~liuly0322&#x2F;blog&#x2F;&quot;,    &quot;title&quot;: &quot;lly的博客&quot;  &#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="访问速度优化"><a href="#访问速度优化" class="headerlink" title="访问速度优化"></a>访问速度优化</h2><h3 id="部署至Coding"><a href="#部署至Coding" class="headerlink" title="部署至Coding"></a>部署至Coding</h3><p>该部分参考于<a href="https://zhuanlan.zhihu.com/p/466268978">这篇文章</a><br>-&gt;首先到<a href="https://coding.net/">官网</a>上进行注册<br>-&gt;创建项目(全功能DevOps项目)，项目名可以使github用户名<br>-&gt;创建代码仓库，仓库名用username.github.io，注意是公开仓库<br>-&gt;在仓库中将其地址复制至博客根目录下配置文件：</p><pre class="line-numbers language-none"><code class="language-none"># Deployment## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;one-command-deploymentdeploy:- type: git  repository:     github: https:&#x2F;&#x2F;github.com&#x2F;HOUCQ4869&#x2F;HOUCQ4869.github.io    coding: https:&#x2F;&#x2F;e.coding.net&#x2F;houcq4869&#x2F;houcq4869&#x2F;houcq4869.github.io.git  branch: main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>-&gt;导入外部仓库，即将github仓库导入至coding中<br>-&gt;修改分支，将默认分支改为main，注意可能要修改github默认分支为main，而不是master，可在\node_modules\hexo-deployer-git\lib\parse_config.js中查找master并改为main<br>-&gt;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d验证即可</p><p>网上许多方法都已过时，本篇作于2023年初，只具一定参考意义，可能并不会与时俱进，此外Coding Pages似乎也找不到，所以虽然实现了github，coding双线部署，但似乎并没有实现国内Coding，国外Github访问加速的目的，因此未完待续…… (感觉似乎快了些……)</p><h3 id="gulp4压缩静态文件"><a href="#gulp4压缩静态文件" class="headerlink" title="gulp4压缩静态文件"></a>gulp4压缩静态文件</h3><p>参考于<a href="https://blog.csdn.net/qq_43625917/article/details/104136304?app_version=5.7.2&code=app_1562916241&csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22104136304%22,%22source%22:%22unlogin%22%7D&uLinkId=usr1mkqgl919blen&utm_source=app">这篇博客</a>，如有问题可进一步查询<br><strong>1.安装gulp工具</strong>  </p><pre class="line-numbers language-none"><code class="language-none">npm install gulp -g&#x2F;npm install gulp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.安装gulp插件</strong>  </p><pre class="line-numbers language-none"><code class="language-none">npm install gulp-minify-html gulp-minify-css gulp-uglify gulp-imagemin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3.建立gulpfile.js文件</strong><br>在博客根目录下新建文件gulpfile.js  </p><pre class="line-numbers language-none"><code class="language-none">var gulp &#x3D; require(&#39;gulp&#39;);&#x2F;&#x2F;Plugins模块获取var minifycss &#x3D; require(&#39;gulp-minify-css&#39;);var uglify &#x3D; require(&#39;gulp-uglify&#39;);var minifyhtml &#x3D; require(&#39;gulp-minify-html&#39;);&#x2F;&#x2F; 压缩 public 目录 css文件gulp.task(&#39;minify-css&#39;, function () &#123;    return gulp.src(&#39;.&#x2F;public&#x2F;**&#x2F;*.css&#39;)        .pipe(minifycss())        .pipe(gulp.dest(&#39;.&#x2F;public&#39;));&#125;);&#x2F;&#x2F; 压缩 public 目录 html文件gulp.task(&#39;minify-html&#39;, function () &#123;    return gulp.src(&#39;.&#x2F;public&#x2F;**&#x2F;*.html&#39;)        .pipe(minifyhtml())        .pipe(gulp.dest(&#39;.&#x2F;public&#39;))&#125;);&#x2F;&#x2F; 压缩 public&#x2F;js 目录 js文件，忽略&#x2F;public&#x2F;lib&#x2F;blog-encrypt.jsgulp.task(&#39;minify-js&#39;, function () &#123;    &#x2F;&#x2F;纠错前：return gulp.src(&#39;.&#x2F;public&#x2F;**&#x2F;*.js&#39;)    return gulp.src([&#39;.&#x2F;public&#x2F;**&#x2F;*.js&#39;, &#39;!.&#x2F;public&#x2F;lib&#x2F;blog-encrypt.js&#39;])        .pipe(uglify())        .pipe(gulp.dest(&#39;.&#x2F;public&#39;))&#125;);&#x2F;&#x2F; 压缩图片&#x2F;&#x2F;gulp.task(&#39;minify-images&#39;, function() &#123;&#x2F;&#x2F;    return gulp.src(&#39;.&#x2F;public&#x2F;images&#x2F;**&#x2F;*.*&#39;)&#x2F;&#x2F;        .pipe(imagemin(&#x2F;&#x2F;        [imagemin.gifsicle(&#123;&#39;optimizationLevel&#39;: 3&#125;),&#x2F;&#x2F;        imagemin.jpegtran(&#123;&#39;progressive&#39;: true&#125;),&#x2F;&#x2F;        imagemin.optipng(&#123;&#39;optimizationLevel&#39;: 7&#125;),&#x2F;&#x2F;        imagemin.svgo()],&#x2F;&#x2F;        &#123;&#39;verbose&#39;: true&#125;))&#x2F;&#x2F;        .pipe(gulp.dest(&#39;.&#x2F;public&#x2F;images&#39;))&#x2F;&#x2F;&#125;);&#x2F;&#x2F;因为我图片用的第三方图床存放的，所以就没压缩图片。(并且最后测试压缩图片时，发现有点权限问题，&#x2F;&#x2F; 分别执行css、heml、js的压缩任务gulp.task(&#39;default&#39;, gulp.parallel(&#39;minify-css&#39;, &#39;minify-html&#39;, &#39;minify-js&#39;));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意上面的public目录是否为你的真实目录，**代表0或多个子目录  </p><p><strong>4.部署执行</strong>  </p><pre class="line-numbers language-none"><code class="language-none">hexo clean &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexio d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果出现提示未安装成功，再安装一次应该就可以<br>除此之外，可以在package.json文件里添加  </p><pre class="line-numbers language-none"><code class="language-none">&quot;scripts:&quot;&#123;    &quot;hexo&quot;: &quot;hexo clean &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d&quot;&#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样就可以直接执行  </p><pre class="line-numbers language-none"><code class="language-none">npm run hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用jsDeliver-Github实现加速"><a href="#使用jsDeliver-Github实现加速" class="headerlink" title="使用jsDeliver+Github实现加速"></a>使用jsDeliver+Github实现加速</h3><p>本文主要参考于<a href="https://zhuanlan.zhihu.com/p/346643522">这篇文章</a><br>大体思路为在github上新建仓库专门储存博客部分资源，通过jsDeliver引用资源<br><strong>1.新建仓库，并将需要cdn加速的资源上传到该仓库</strong>，如themes中的source文件夹</p><pre class="line-numbers language-none"><code class="language-none">git initgit remote add 名字 连接地址git remote -v &#x2F;&#x2F;测试git add .git status &#x2F;&#x2F;查看状态git commit -m &#39;inital&#39;git push -u 名字 分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于git指令操作不熟悉的可参考<a href="https://blog.csdn.net/qq_36667170/article/details/79085301">这篇文章</a>  </p><p><strong>2.点击右侧creat a new release发布版本</strong><br>自定义发布版，如新建tag1.0，下面title填写1.0  </p><p><strong>3.通过jsDeliver引用资源</strong>  </p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;你的用户名&#x2F;你的仓库名@发布的版本号&#x2F;文件路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若不使用版本号，默认为最新版本<br>可将hexo 中用到静态资源的地方换为cdn加速，如主题配置文件中：  </p><pre class="line-numbers language-none"><code class="language-none"># The used front-end library can be replaced with the corresponding CDN address as needed,# If the specific version is not specified below, you can use the latest version.# 使用到的前端库，可按需替换成对应的CDN地址，如果下面未指定具体的版本号，使用最新的版本即可.# 注：jsdelivr可以自动帮你生成.min版的js和css，所以你在设置js及css路径中可以直接写.min.xxxlibs:  css:    matery: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;css&#x2F;matery.css    mycss: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;css&#x2F;my.css    fontAwesome: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;awesome&#x2F;css&#x2F;all.css # V5.11.1    materialize: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;materialize&#x2F;materialize.min.css # 1.0.0    aos: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;aos&#x2F;aos.css    animate: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;animate&#x2F;animate.min.css # V3.5.1    lightgallery: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;lightGallery&#x2F;css&#x2F;lightgallery.min.css # V1.6.11    aplayer: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;aplayer&#x2F;APlayer.min.css    dplayer: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;dplayer&#x2F;DPlayer.min.css    gitalk: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;gitalk&#x2F;gitalk.css    jqcloud: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;jqcloud&#x2F;jqcloud.css    tocbot: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;tocbot&#x2F;tocbot.css    prism: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;prism&#x2F;prism.css  js:    matery: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;js&#x2F;matery.js    jquery: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;jquery&#x2F;jquery.min.js    materialize: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;materialize&#x2F;materialize.min.js # 1.0.0    masonry: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;masonry&#x2F;masonry.pkgd.min.js # v4.0.0    aos: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;aos&#x2F;aos.js    scrollProgress: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;scrollprogress&#x2F;scrollProgress.min.js    lightgallery: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;lightGallery&#x2F;js&#x2F;lightgallery-all.min.js # V1.6.11    clicklove: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;others&#x2F;clicklove.js    busuanzi: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;others&#x2F;busuanzi.pure.mini.js    aplayer: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;aplayer&#x2F;APlayer.min.js    dplayer: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;dplayer&#x2F;DPlayer.min.js    crypto: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;cryptojs&#x2F;crypto-js.min.js    echarts: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;echarts&#x2F;echarts.min.js    gitalk: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;gitalk&#x2F;gitalk.min.js    valine: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;valine&#x2F;Valine.min.js # 若想保持最新版，请替换为 https:&#x2F;&#x2F;unpkg.com&#x2F;valine&#x2F;dist&#x2F;Valine.min.js  默认为 &#x2F;libs&#x2F;valine&#x2F;Valine.min.js    minivaline: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;minivaline&#x2F;MiniValine.js    jqcloud: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;jqcloud&#x2F;jqcloud-1.0.4.min.js    tocbot: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;tocbot&#x2F;tocbot.min.js    canvas_nest: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;background&#x2F;canvas-nest.js    ribbon: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;background&#x2F;ribbon.min.js    ribbonRefresh: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;background&#x2F;ribbon-refresh.min.js    ribbon_dynamic: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;background&#x2F;ribbon-dynamic.js    instantpage: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;instantpage&#x2F;instantpage.js    snow: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;libs&#x2F;others&#x2F;snow.js# The post featured images that needs to be displayed when there is no image.# 无文章特色图片时需要显示的文章特色图片.featureImages:- https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;medias&#x2F;featureimages&#x2F;0.jpg- https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;medias&#x2F;featureimages&#x2F;1.jpg- https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;medias&#x2F;featureimages&#x2F;2.jpg- https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;HOUCQ4869&#x2F;mycdn&#x2F;source&#x2F;medias&#x2F;featureimages&#x2F;3.jpg……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4.最后执行命令，over</strong></p><pre class="line-numbers language-none"><code class="language-none">npm run hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/01/11/hello-world/"/>
      <url>/2023/01/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
